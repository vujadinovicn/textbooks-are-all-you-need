{"problem":"def calculate_average_price(prices):\n    \"\"\"\n    Calculate the average price of a list of fashion items.\n\n    Args:\n    prices (list): A list of prices of fashion items.\n\n    Returns:\n    float: The average price of the fashion items.\n    \"\"\"","solution":"\n\n    total = 0\n\n    while prices:\n        # Slices the prices list to get the first item and remove it from the original list\n        price = prices.pop(0)\n\n        # Complete the missing code to update the total variable by adding the current price \n        \n    \n    # Calculate the average price by dividing the total by the number of fashion items\n    average_price = total \/ len(prices)\n\n    return average_price"}
{"problem":"def find_gene(sequence, target_gene):\n\n\"\"\"\n\nGiven a DNA sequence and a target gene, this function should return the starting index of the target gene in the given sequence, using a while loop and boolean expressions.\n\nNote: The target gene is represented as a string of characters, and we assume that it only occurs once in the sequence.\n\nArgs:\n- sequence: a string representing the DNA sequence to search in\n- target_gene: a string representing the target gene to find\n\nReturns:\n- The starting index (integer) of the target gene in the sequence, or -1 if the target gene is not found.\n\n\"\"\"","solution":"\n\nindex = 0\ngene_len = len(target_gene)\n\nwhile index <= len(sequence) - gene_len:\n    \n    # Check if current substring matches the target gene\n    if sequence[index:index+gene_len] == target_gene:\n        return index\n    \n    index += 1\n\nreturn -1  # Target gene not found in the given sequence"}
{"problem":"def get_common_words(string1, string2):\n    \"\"\"\n    This function takes in two strings and returns a set of common words found in both strings.\n    \n    Args:\n    string1 (str): The first string.\n    string2 (str): The second string.\n    \n    Returns:\n    set: A set of common words found in both strings.\n    \n    Raises:\n    ValueError: If either string1 or string2 is empty.\n    \"\"\"","solution":"\n    if not string1 or not string2:\n        raise ValueError(\"Both strings must not be empty\")\n\n    words1 = string1.split()\n    words2 = string2.split()\n    common_words = set()\n\n    for word1 in words1:\n        for word2 in words2:\n            if word1 == word2:\n                common_words.add(word1)\n\n    return common_words\n\n\n"}
{"problem":"def advantages_equal(musician_1, musician_2):\n\n    \"\"\"This exercise will determine the intersection of advantages between two musicians and check if they are equal.\"\"\"","solution":"\n\n    # Find the advantages of musician_1\n    musician_1_advantages = set(musician_1['advantages'])\n    \n    # Find the advantages of musician_2\n    musician_2_advantages = set(musician_2['advantages'])\n    \n    # Find the common advantages between musician_1 and musician_2\n    common_advantages = musician_1_advantages.intersection(musician_2_advantages)\n    \n    # Check if the advantages are equal in count\n    advantages_equal = len(musician_1_advantages) == len(musician_2_advantages)\n    \n    return common_advantages, advantages_equal\n\n\n"}
{"problem":"def create_tuple(n):\n    \"\"\"\n    Given an integer n, create a nested tuple using ternary operators.\n\n    Args:\n    n (int): The length of the nested tuple.\n\n    Returns:\n    tuple: Nested tuple of length n, where each element is either a tuple or a string 'Done'.\n\n    Example:\n    Input:\n    create_tuple(2)\n\n    Output:\n    (('Done', 'Done'),)\n\n    Explanation:\n    The nested tuple has length 2 and each element is 'Done'. Therefore, it returns (('Done', 'Done'),).\n    \"\"\"","solution":"\n\n    return (('Done',) * n,) if n else 'Done'\n\n"}
{"problem":"def create_tuple(graphic_designer_name, graphic_designer_age, graphic_designer_skill_level, graphic_designer_experience):\n\n    \"\"\"\n    This exercise focuses on creating a tuple to store information about a graphic designer.\n    The tuple should include the designer's name, age, skill level, and experience.\n\n    Your task is to complete the code by creating a tuple with the provided information. Please make sure to follow the given order.\n\n    Args:\n    - graphic_designer_name (str): The name of the graphic designer.\n    - graphic_designer_age (int): The age of the graphic designer.\n    - graphic_designer_skill_level (str): The skill level of the graphic designer (e.g., Beginner, Intermediate, Advanced).\n    - graphic_designer_experience (int): The years of experience of the graphic designer.\n\n    Returns:\n    - tuple: A tuple containing the provided information about the graphic designer.\n    \"\"\"","solution":"\n\n    # Create a tuple with the given information **in the correct order**\n    graphic_designer_tuple = (graphic_designer_name, graphic_designer_age, graphic_designer_skill_level, graphic_designer_experience)\n    \n    return graphic_designer_tuple\n\n# Example usage\ndesigner_info = create_tuple(\"John"}
{"problem":"def intersection_sets(s1, s2):\n\n    \"\"\"\n    This exercise requires you to complete the code to find the intersection of two sets using list comprehension and iterating through sets.\n    \n    You are given two sets, s1 and s2, and you need to find the common elements between them. You should use list comprehension\n    to create a new list containing the common elements found in both sets. Finally, return the list with the common elements.\n    \n    Remember to use list comprehension and iterate through sets to solve this exercise. Good luck!\n    \"\"\"","solution":"\n\n    intersection = [x for x in s1 if x in s2]  # Use list comprehension to iterate through s1 and check if each element exists in s2\n\n    return intersection"}
{"problem":"def find_common_elements(set1, set2):\n\n    \"\"\"\n    This function takes two sets as input and returns a new set with only the elements that are \n    greater than or equal to the smallest element in the first set.\n    \n    Args:\n    set1 (set): First input set\n    set2 (set): Second input set\n    \n    Returns:\n    set: A new set containing the common elements from both sets\n    \"\"\"","solution":"\n    \n    min_element = min(set1)  # Find the smallest element in set1\n    return {element for element in set2 if element >= min_element}\n\n\n"}
{"problem":"def find_common_elements(list1, list2):\n    \"\"\"\n    Given two lists, find the common elements between them.\n\n    Parameters:\n    list1 (list): First list to check for common elements\n    list2 (list): Second list to check for common elements\n\n    Returns:\n    common_elements (list): List of common elements between list1 and list2\n    \"\"\"","solution":"\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate over each element in list1\n    for element in list1:\n        # Check if the element is not equal to any elements in list2\n        if element not in list2:\n            # Add the element to the common_elements list\n            common_elements.append(element)\n\n    return common_elements"}
{"problem":"def find_sum(nums):\n    \"\"\"\n    Takes a list of numbers as input and returns the sum of all the numbers greater than 10.\n\n    Args:\n    nums (list): A list of numbers\n\n    Returns:\n    int: The sum of all the numbers greater than 10\n    \"\"\"","solution":"\n\n    total = 0\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Add the number to the total\n            total += num\n\n    return total\n\n"}
{"problem":"def find_criminals(criminals: tuple, search_terms: tuple) -> list:\n\n    \"\"\"\n    This function takes a tuple of criminals and a tuple of search terms\n    and returns a list of criminals that match the search terms.\n\n    Args:\n    criminals (tuple): A tuple of all the criminals' information\n    search_terms (tuple): A tuple of search terms for finding specific criminals\n\n    Returns:\n    list: A list of criminals that match the search terms\n\n    Example:\n    criminals = ((\"John Doe\", 35, \"Male\"), (\"Jane Smith\", 28, \"Female\"), (\"Michael Johnson\", 42, \"Male\"))\n    search_terms = (\"Male\",)\n\n    find_criminals(criminals, search_terms) => [(\"John Doe\", 35, \"Male\"), (\"Michael Johnson\", 42, \"Male\")]\n    \"\"\"","solution":"\n\n    matching_criminals = []\n    for criminal in criminals:\n        if all(term in criminal for term in search_terms):\n            matching_criminals.append(criminal)\n    return matching_criminals\n\ncriminals = ((\"John Doe\", 35, \"Male\"), (\"Jane Smith\", 28, \"Female\"), (\"Michael Johnson\", 42, \"Male"}
{"problem":"def intersection_of_sequence_and_addition_assignment(sequence: list, number: int):\n    \"\"\"Given a sequence and a number, find the intersection of the sequence after adding the number to each element.\n\n    Args:\n        sequence (list): A list of integers.\n        number (int): An integer to be added to each element of the sequence.\n\n    Returns:\n        list: A list with the intersection of elements after adding the number.\n    \"\"\"","solution":"\n    result = set(sequence[0] + number)\n    for i in range(1, len(sequence)):\n        current_set = set()\n        for j in result:\n            current_set.add(j + sequence[i])\n        result = result.intersection(current_set)\n    return list(result)\n\n\n"}
{"problem":"def find_special_chars(string: str) -> list:\n\n    \"\"\"\n    Given a string, find and return a list of all special characters that are surrounded by uppercase letters.\n\n    Args:\n    string (str): The input string to search for special characters.\n\n    Returns:\n    list: A list of special characters that satisfy the given condition.\n\n    Example:\n    >>> find_special_chars('Ab#cD*efG')\n    ['#', '*']\n    \"\"\"","solution":"\n\n    special_chars = []\n\n    for i in range(len(string)):\n        if string[i].isupper() and i > 0 and i < len(string)-1:\n            if not string[i-1].isalpha() and not string[i+1].isalpha():\n                special_chars.append(string[i])\n\n    return special_chars\n\nmissing_code = \"Ab#cD*efG\"\nresult = find_special_chars(missing_code)\nprint(result)"}
{"problem":"def calculate_factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using nested ternary operators within a basic while loop.\n\n    Args:\n    n (int): The number for which factorial needs to be calculated.\n\n    Returns:\n    int: The factorial of the input number.\n    \"\"\"","solution":"\n\n    # Initialize the factorial variable\n    factorial = 1\n\n    # Use a while loop to calculate factorial\n    while n > 1:\n        # Nested ternary operators to calculate factorial\n        factorial *= n if n > 1 else 1\n        n -= 1\n\n    return factorial\n\n# Example usage\nprint(calculate_factorial(5))  # Output: 120"}
{"problem":"def while_subtraction(base_number, subtract_value):\n    \"\"\"\n    This exercise requires you to write a basic while loop syntax to perform a subtraction operation.\n    \n    Given a base number, your task is to subtract the subtract_value from the base_number using a while loop \n    and return the final result.\n    \n    Args:\n    - base_number: an integer representing the base number\n    - subtract_value: an integer representing the value to subtract from the base number\n    \n    Returns:\n    - The final result after subtracting the subtract_value from the base_number\n    \n    Example:\n    - If base_number = 10 and subtract_value = 3\n      The output should be 7, as 10 - 3 = 7\n    \n    Instructions:\n    1. Initialize a variable 'result' with the value of 'base_number'\n    2. Write a while loop that continues as long as 'result' is greater than or equal to 'subtract_value'\n    3. Inside the loop, subtract 'subtract_value' from 'result'\n    4. Finally, return 'result'\n    \"\"\"","solution":"\n\n    result = base_number\n\n    # Write your code here\n\n\n"}
{"problem":"def calculate_total_sales(revenue_list):\n\n    \"\"\"\n    Given a list of revenues for different products, this function calculates the total sales in floating-point \n    format.\n\n    Args:\n    revenue_list (list): A list of revenue values for different products.\n\n    Returns:\n    float: The total sales calculated from the revenue list.\n    \"\"\"","solution":"\n\n    # Initialize the cumulative sales as 0.0\n    total_sales = 0.0\n\n    # Iterate over each revenue value in the list\n    for revenue in revenue_list:\n        # Convert the revenue to floating-point number if necessary\n        revenue = float(revenue)\n        \n        # Add the revenue to the total sales\n        total_sales += revenue\n\n    return total_sales\n"}
{"problem":"def find_affordable_items(budget, items):\n    \"\"\"\n    Given a budget and a dictionary of items with their prices,\n    find the items that are less expensive than the budget.\n\n    Args:\n    - budget: The maximum amount of money the interior designer can spend.\n    - items: A dictionary mapping item names to their prices.\n\n    Returns:\n    - A list of item names that are less expensive than the budget.\n    \"\"\"","solution":"\n\n    affordable_items = []  # Stores the names of affordable items\n\n    # Loop through the dictionary using items.items()\n    for item, price in items.items():\n        if price < budget:  # Check if the price of the item is less than the budget\n            affordable_items.append(item)  # Add the name of the affordable item to the list\n\n    return affordable_items\n\n"}
{"problem":"def musician_dict(musician_list):\n    \n    \"\"\"\n    This exercise is to create a dictionary for a musician, where the keys are the genres of music they play and the values are the number of albums they have released in that genre.\n    \n    Write a function that takes in a list of genres for a musician and returns a dictionary containing the count of albums released in each genre. If a genre is repeated in the list, it should only be counted once in the dictionary.\n    \n    Example:\n    \n    Input:\n    musician_list = ['Rock', 'Pop', 'Rock', 'Hip Hop', 'Jazz', 'Rock', 'Pop']\n    \n    Output:\n    {'Rock': 2, 'Pop': 1, 'Hip Hop': 1, 'Jazz': 1}\n    \n    \"\"\"","solution":"\n    \n    genre_dict = {}\n    i = 0\n    \n    while i < len(musician_list):\n        genre = musician_list[i]\n        if genre not in genre_dict:\n            genre_dict[genre] = 1\n        else:\n            genre_dict[genre] += 1\n        # Complete the code to increment the value for the genre in the dictionary\n        \n        i += 1\n    \n    return genre"}
{"problem":"def nurse_schedule(schedule, nurse_name):\n\n    \"\"\"A nurse's schedule is given as a list of tuples, where each tuple represents a shift with start and end time.\n    Loop through the schedule and find the shifts where the nurse named \"nurse_name\" is not available. Print the number of such shifts.\n    \n    Args:\n    schedule (list): A list of tuples representing shifts in the format (start_time, end_time)\n    nurse_name (str): The name of the nurse\n    \n    Returns:\n    None\n    \"\"\"","solution":"\n\n    unavailable_shifts = 0\n\n    for shift in schedule:\n        start_time, end_time = shift\n        \n        if not nurse_name_available(nurse_name, shift):\n            unavailable_shifts += 1\n\n    print(\"Number of shifts where\", nurse_name, \"is not available:\", unavailable_shifts)\n\n\n"}
{"problem":"def find_highest_peak(elevations):\n    \"\"\"\n    Given a list of elevations representing a geographic region, \n    find the highest peak.\n    \n    :param elevations: A list of integers representing elevations.\n    :return: The highest peak (an integer).\n    \"\"\"","solution":"\n    \n    if not elevations:\n        return None\n\n    highest_peak = elevations[0]\n    for elevation in elevations:\n        if elevation > highest_peak:\n            highest_peak = elevation\n\n            # Write code below to break out of the loop \n            # if the current elevation is greater than 5000.\n\n            \n\n    return highest_peak"}
{"problem":"def calculate_volumes(spheres):\n\n    \"\"\"This function calculates the volumes of spheres given their radii.\"\"\"","solution":"\n    \n    volumes = []\n    for radius in spheres:\n        # Complete the code to calculate the volume of a sphere using the formula (4\/3) * pi * radius^3\n        volume = (4 \/ 3) * 3.14159 * (radius ** 3)\n        volumes.append(volume)\n    return volumes\n\nradii = [2, 3, 4, 5]\nsphere_volumes = calculate_volumes(radii)\nprint(sphere_volumes)\n\n# Output: [33.51029333333333, 113.09722666666666, 268.08234666666664, 523.5983333333332]"}
{"problem":"def count_common_characters(therapist_notes, patient_notes):\n\n    \"\"\"\n    This function takes in two strings, therapist_notes and patient_notes,\n    and returns the count of common characters between the two strings.\n    \"\"\"","solution":"\n\n    common_characters = []\n    for char1 in therapist_notes:\n        for char2 in patient_notes:\n            # Check if character is common\n            if char1 == char2 and char1 not in common_characters:\n                common_characters.append(char1)\n\n    return len(common_characters)\n\n\n"}
{"problem":"def replace_common_characters(therapist_notes, patient_notes):\n\n    \"\"\"\n    This function takes in two strings, therapist_notes and patient_notes,\n    and replaces any common characters between the two strings with '#'.\n    It returns the modified therapist_notes string.\n    \"\"\"","solution":"\n\n    modified_notes = ''\n    for char1 in therapist_notes:\n        is_common = False\n        for char2 in patient_notes:\n            # If character is common, replace it with '#'\n            if char1 == char2:\n                modified_notes += '#'\n                is_common = True\n                break\n        if not is_common:\n            modified_notes += char1\n\n    return modified_notes\n\n\n"}
{"problem":"def find_common_elements(data1, data2):\n    \"\"\"\n    Write a function that takes in two tuples, `data1` and `data2`, which contains data related to biological studies.\n    The function should return a tuple containing only the elements that exist in both `data1` and `data2`, preserving the order.\n\n    Example:\n    data1 = ('AGT', 'CTG', 'GGA', 'AAC')\n    data2 = ('AAG', 'CTG', 'TGC', 'ATC')\n\n    find_common_elements(data1, data2)  # Output: ('CTG',)\n    \"\"\"","solution":"\n\n    common_elements = ()\n    # Iterate through each element of data1\n    for elem in data1:\n        # Check if the element exists in data2\n        if elem in data2:\n            # Add the element to the common_elements tuple\n            common_elements += (elem,)\n\n    return common_elements"}
{"problem":"def update_actor_details(actor_data):\n    \"\"\"\n    This function takes a list of dictionaries containing actor\/actress details. It updates the salary of each actor\n    based on their experience and returns the updated list.\n\n    Args:\n    - actor_data (list of dictionaries): A list containing actor\/actress details. Each dictionary contains 'name',\n    'experience', and 'salary' keys.\n\n    Returns:\n    - updated_actor_data (list of dictionaries): The updated list of actor\/actress details with their updated salary.\n    \"\"\"","solution":"\n\n    # Iterate over the actor_data list using enumerate to get the index and dictionary at each iteration\n    for index, actor in enumerate(actor_data):\n        # Update the salary based on the actor's experience\n        if actor['experience'] < 5:\n            actor['salary'] = actor['salary'] * 1.1\n        elif actor['experience'] >= 5 and actor['experience'] < 10:\n            actor['salary'] = actor['salary'] * 1.2\n        else:\n            actor['salary'] = actor['salary'] * 1.3\n\n    return actor_data\n\n\n"}
{"problem":"def find_common_letters(artist1, artist2):\n    \"\"\"\n    This function takes in two artist names as arguments and returns a string containing all the common letters\n    between the two names, using a while loop and tuple slicing.\n\n    Args:\n        artist1 (str): The name of the first artist.\n        artist2 (str): The name of the second artist.\n\n    Returns:\n        str: A string containing all the common letters between the two artists' names.\n\n    Raises:\n        ValueError: If either artist's name is an empty string.\n\n    \"\"\"","solution":"\n\n    if not artist1 or not artist2:\n        raise ValueError(\"Artist name cannot be empty\")\n\n    common_letters = \"\"\n    i = 0\n\n    while i < len(artist1):\n        j = 0\n        while j < len(artist2):\n            if artist1[i] == artist2[j]:\n                common_letters += artist1[i]\n                break\n            j += 1\n        i += 1\n\n    return common_letters\n\n\n"}
{"problem":"def nurse_is_busy(schedule):\n    \"\"\"\n    A nurse is busy for half of the day and must take a break for 30 minutes every hour.\n    Given a schedule that represents the nurse's availability during the day,\n    write a function that determines if there is a gap long enough for the nurse to take a break.\n\n    Args:\n        schedule (tuple): A tuple of integers representing the nurse's schedule, where 1 represents patient\n                          appointments and 0 represents an available time slot.\n\n    Returns:\n        bool: True if the nurse can take a break, False otherwise.\n\n    Example:\n        nurse_is_busy((0, 1, 0, 0, 0, 1, 0, 1, 1, 0))\n        Output: True\n        Explanation: The nurse can take a break during the gap from index 4 to 5\n                     as there are at least 30 consecutive minutes available.\n\n    \"\"\"","solution":"\n    break_length = 30  # minutes\n    gap_length = 0\n    for slot in schedule:\n        if slot == 0:\n            gap_length += 1\n        else:\n            if gap_length >= break_length:\n                return True\n           "}
{"problem":"def create_animal_tuple(name, species, size, weight, age):\n    \"\"\"\n    This exercise requires you to create a tuple containing information about an animal. \n    The tuple should include the name, species, size, weight, and age of the animal.\n    Your task is to write the code to create the tuple and use if statements to perform additional actions.\n\n    Args:\n    - name (str): The name of the animal.\n    - species (str): The species of the animal.\n    - size (str): The size of the animal.\n    - weight (float): The weight of the animal.\n    - age (int): The age of the animal.\n\n    Returns:\n    - animal_tuple (tuple): A tuple containing the information about the animal.\n    \"\"\"","solution":"\n\n    animal_tuple = tuple()\n\n    if isinstance(name, str) and isinstance(species, str) and isinstance(size, str) and \\\n       isinstance(weight, float) and isinstance(age, int):\n\n        animal_tuple = (name, species, size, weight, age)\n        \n        if weight > 100:\n            print(\"Warning: This animal is significantly heavier than average.\")\n        \n        if age < 1:\n            print(\"This animal is very young"}
{"problem":"def intersect_slicing_conjugate_abs(x):\n    \"\"\"\n    This exercise involves applying slicing to a complex number, then computing its conjugate and absolute value.\n    \"\"\"","solution":"\n\n    # Creating a complex number\n    complex_num = complex(x)\n\n    # Slicing the real and imaginary parts\n    real_part = complex_num.real\n    imag_part = complex_num.imag\n\n    # Computing the conjugate of the complex number\n    conjugate = complex(real_part, -imag_part)\n\n    # Computing the absolute value of the complex number\n    absolute_value = abs(complex_num)\n\n    # Return the conjugate and absolute value\n    return conjugate, absolute_value\n\n"}
{"problem":"def search_photos(tags: list, locations: list, photodatabase: dict) -> list:\n\n    \"\"\"\n    Given a list of tags, a list of locations, and a photo database,\n    this function returns a list of photos that have at least one tag\n    from the tags list and are taken at a location specified in the\n    locations list.\n    \n    Args:\n        tags (list): A list of tags.\n        locations (list): A list of locations.\n        photodatabase (dict): A dictionary representing the photo database.\n        \n    Returns:\n        list: A list of matching photos.\n    \"\"\"","solution":"\n\n    result = []\n    for location in locations:\n        if location in photodatabase:\n            for photo in photodatabase[location]:\n                if any(tag in photo['tags'] for tag in tags):\n                    result.append(photo)\n    return result"}
{"problem":"def get_photo_location(photo):\n    \"\"\"\n    Given a photo object, this function returns the location of the photo.\n    \n    Args:\n        photo (dict): A dictionary representing a photo object with 'location' key.\n        \n    Returns:\n        str: The location of the photo.\n    \"\"\"","solution":"\n    if 'location' in photo and isinstance(photo['location'], str):\n        return photo['location']\n    else:\n        return \"Unknown\"\n\n"}
{"problem":"def get_special_photos(photos):\n    \"\"\"\n    Given a list of photo objects, this function returns a list of photos taken at special locations.\n    A location is considered special if it starts with the keyword 'Special:'.\n    \n    Args:\n        photos (list): A list of dictionaries representing photo objects with 'location' key.\n        \n    Returns:\n        list: A list of dictionaries representing special photos.\n    \"\"\"","solution":"\n    special_photos = []\n    \n    for photo in photos:\n        location = get_photo_location(photo)\n        \n        if isinstance(location, str) and location.startswith('Special:'):\n            special_photos.append(photo)\n    \n    return special_photos\n\n"}
{"problem":"def find_negative_index(vet_records):\n    \"\"\"\n    Given a dictionary of veterinary records, find the negative index of the animal's name.\n\n    Args:\n    vet_records (dict): A dictionary containing the animal name as the key and the number of visits as the value.\n\n    Returns:\n    int: The negative index of the animal's name.\n\n    \"\"\"","solution":"\n    animal_names = list(vet_records.keys())\n    # Loop through the dictionary to find the animal with the maximum number of visits\n    max_visits = 0\n    for animal_name in vet_records:\n        visits = vet_records[animal_name]\n        if visits > max_visits:\n            max_visits = visits\n\n    # Find the negative index of the animal with maximum visits\n    for i in range(len(animal_names)):\n        if vet_records[animal_names[i]] == max_visits:\n            return -1 * (len(animal_names) - i - 1)\n"}
{"problem":"def replace_missing_vowels(text):\n\n    \"\"\"\n    Given a text as input, the function replaces all the missing vowels with the letter 'x'.\n    \"\"\"","solution":"\n\n    # Define a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    # Convert the input text to lowercase\n    text = text.lower()\n\n    # Loop through each character in the text\n    for char in text:\n        \n        # Check if the character is a letter and not already a vowel\n        if char.isalpha() and char not in vowels:\n            \n            # Replace the character with 'x'\n            text = text.replace(char, 'x')\n\n    return text\n\n# Now, let's test the function with an example\ninput_text = \"Hello, how are you today?\"\nprint(replace_missing_vowels(input_text))\n\n"}
{"problem":"def physician_code_completion(patients):\n    \"\"\"\n    Given a dictionary of patients with their corresponding medical conditions,\n    modify the list of medical conditions for each patient based on certain conditions.\n\n    - If a patient's age is less than 18, add 'CHILD' to their medical conditions.\n    - If a patient's age is greater than or equal to 65, add 'ELDERLY' to their medical conditions.\n    - If a patient's age is between 18 and 65 (inclusive), add 'ADULT' to their medical conditions.\n\n    Args:\n    patients (dict): A dictionary mapping patient names (keys) to their ages (values).\n\n    Returns:\n    dict: The same dictionary with modified medical conditions for each patient.\n    \"\"\"","solution":"\n    \n    for patient, age in patients.items():\n        if age < 18:\n            patients[patient].append('CHILD')\n        elif 18 <= age <= 65:\n            patients[patient].append('ADULT')\n        elif age >= 65:\n            patients[patient].append('ELDERLY')\n    \n    return patients\n\n# Example usage:\npatients = {\n    'John': 22,\n    'Emily': 8,\n    'David': 45,\n"}
{"problem":"def find_average_income(data):\n    \"\"\"Calculate the average income for each city\"\"\"","solution":"\n\n    average_incomes = []\n    for city_data in data:\n        total_income = 0\n        num_households = 0\n        for household in city_data:\n            for income in household[\"incomes\"]:\n                total_income += income\n                num_households += 1\n\n        if num_households > 0:\n            average_income = total_income \/ num_households\n            average_incomes.append(average_income)\n\n    return average_incomes\n\n\ncity_data = [\n    [\n        {\"incomes\": [45000, 60000, 75000]},\n        {\"incomes\": [35000, 48000]},\n        {\"incomes\": [52000, 68000, 75000, 82000]}\n    ],\n    [\n        {\"incomes\": [58000, 62000, 69000]},\n        {\"incomes\": [42000, 55000, 72000]},\n        {\"incomes\": [48000, 55000]}\n    ],\n    [\n        {\"incomes\": [45000, 51000, 66000]},\n        {\"incomes\": [33000, 42000"}
{"problem":"def intersection_of_not_operator_and_repetition(data):\n    \"\"\"\n    This function takes a list of integers as input and returns the intersection \n    of numbers that are NOT divisible by 3 and are repeated at least twice.\n\n    Args:\n    data (list): A list of integers.\n\n    Returns:\n    list: A list of integers representing the intersection of numbers that are NOT \n          divisible by 3 and are repeated at least twice.\n    \"\"\"","solution":"\n\n    unique_nums = set()\n    repeated_nums = set()\n    result = []\n\n    for num in data:\n        if num % 3 != 0:\n            if num in unique_nums:\n                repeated_nums.add(num)\n            else:\n                unique_nums.add(num)\n\n    for num in repeated_nums:\n        if data.count(num) > 1:\n            result.append(num)\n\n    return result\n"}
{"problem":"def validate_input(choice):\n    \"\"\"Check if the choice is valid. Return True if valid, False otherwise.\"\"\"","solution":"\n    # Implement the code to check if the choice is valid.\n    # Returns True if the choice is between 1 and 10, inclusive.\n    # Otherwise, returns False.\n\n"}
{"problem":"def process_choice(choice):\n    \"\"\"Implement the main logic for processing the choice given by the player.\"\"\"","solution":"\n    # Implement the code to process the choice based on game rules.\n    # If the choice is even, print \"Even choice!\" and continue to next iteration.\n    # If the choice is prime, print \"Prime choice!\" and break out of the loop.\n    # If the choice is divisible by 5, print \"Divisible by 5!\" and return True.\n    # Otherwise, return False.\n\n"}
{"problem":"def game():\n    \"\"\"Simulate a game with choices made by the player.\"\"\"","solution":"\n    while True:\n        choice = int(input(\"Enter a number between 1 and 10: \"))\n        \n        valid = validate_input(choice)\n        if not valid:\n            print(\"Invalid input. Try again.\")\n            continue\n        \n        even = choice % 2 == 0\n        prime = choice > 1"}
{"problem":"def calculate_fuel_usage(fuel_capacity, distance_traveled):\n    \"\"\"\n    Calculate the fuel usage of an aircraft based on its fuel capacity and the distance traveled.\n    The fuel usage is determined by dividing the distance traveled by the fuel capacity.\n    Return the result as a floating-point number.\n\n    Example:\n    fuel_capacity: 12000   distance_traveled: 5000\n    fuel usage = 5000 \/ 12000 = 0.4166666666666667\n    Return 0.4166666666666667\n    \"\"\"","solution":"\n    fuel_usage = float(distance_traveled) \/ fuel_capacity\n    return fuel_usage\n\n"}
{"problem":"def determine_speed_ratio(speed, reference_speed):\n    \"\"\"\n    Determine the speed ratio between an aircraft's speed and a reference speed.\n    The speed ratio is calculated by dividing the speed by the reference speed.\n    Return the result as a floating-point number.\n\n    Example:\n    speed: 500  reference_speed: 250\n    speed ratio = 500 \/ 250 = 2.0\n    Return 2.0\n    \"\"\"","solution":"\n    speed_ratio = float(speed) \/ reference_speed\n    return speed_ratio\n\n"}
{"problem":"def modify_expenses(accountant_data):\n    \"\"\"\n    Given a list of accountant's expenses, modify the amounts of the expenses by adding a bonus to each amount.\n\n    Args:\n    accountant_data (list of tuples): A list of tuples representing the accountant's expenses with their corresponding amounts.\n\n    Returns:\n    list: A list of modified expenses with the bonus added to each amount.\n\n    Example:\n    modify_expenses([(1, 100), (2, 200), (3, 300)]) -> [101, 202, 303]\n    \"\"\"","solution":"\n\n    modified_expenses = []\n\n    # Iterate over each expense tuple and unpack the amount\n    for _, amount in accountant_data:\n        # Modify the amount by adding a bonus and append it to the modified_expenses list\n        modified_expenses.append(amount + 1_000_000)\n\n    return modified_expenses\n\n"}
{"problem":"def adjust_exposure(photo_exposure, target_exposure):\n\n    \"\"\"\n    This function takes in the current exposure level of a photo and the target exposure level desired by a photographer.\n    It adjusts the exposure by iteratively increasing or decreasing the exposure level until it matches the target exposure level.\n    The adjustment is done using a while loop and additional conditions within if statements to ensure the exposure level converges accurately.\n    \"\"\"","solution":"\n\n    # Iteratively adjust the exposure level until it reaches the target exposure\n    while abs(photo_exposure - target_exposure) > 0.01:\n        if photo_exposure < target_exposure:\n            photo_exposure += 0.1   # Increase exposure level by 0.1\n            if photo_exposure > 1.0:\n                photo_exposure = 1.0   # Limit maximum exposure level to 1.0\n        else:\n            photo_exposure -= 0.1   # Decrease exposure level by 0.1\n            if photo_exposure < 0.0:\n                photo_exposure = 0.0   # Limit minimum exposure level to 0.0\n\n    return photo_exposure\n\n# Adjust the exposure of a photo from 0"}
{"problem":"def calculate_average_depth(rock_layers, num_shifts):\n\n    \"\"\"\n    This function takes a list of rock layers and the number of times the shift operators should be applied. It calculates the average depth of the rock layers after applying the shift operators.\n\n    Args:\n    - rock_layers: a list containing the depths of rock layers\n    - num_shifts: an integer representing the number of times the shift operators should be applied\n\n    Returns:\n    - average_depth: a float representing the average depth of the rock layers\n\n    Example:\n    calculate_average_depth([10, 20, 30, 40, 50], 3)\n    Output: 25.0\n    \"\"\"","solution":"\n\n    shifted_layers = rock_layers.copy()\n\n    for shift in range(num_shifts):\n        for i in range(len(shifted_layers)):\n            if i == 0:\n                shifted_layers[i] = shifted_layers[i] << 1\n            else:\n                shifted_layers[i] = shifted_layers[i] >> 1\n\n    total_depth = sum(shifted_layers)\n    average_depth = total_depth \/ len(shifted_layers)\n\n    return average_depth\n\nrock_layers = [10, 20, 30, 40, 50]\n"}
{"problem":"def create_tuple_from_string_math(text):\n    \"\"\"\n    Given a string containing mathematical expressions separated by commas, create a tuple of the evaluated expressions.\n\n    Args:\n    text (str): A string containing mathematical expressions.\n\n    Returns:\n    tuple: A tuple of the evaluated expressions.\n\n    Example:\n    >>> create_tuple_from_string_math(\"2+3, 4*5, 6-1\")\n    (5, 20, 5)\n    >>> create_tuple_from_string_math(\"sqrt(16), sin(pi\/2), log10(1000)\")\n    (4.0, 1.0, 3.0)\n    \"\"\"","solution":"\n\n    # Initialize an empty list to store the evaluated expressions\n    result = []\n\n    # Remove any whitespaces from the text\n    text = text.replace(\" \", \"\")\n\n    # Split the string into individual expressions using ',' as delimiter\n    expressions = text.split(\",\")\n\n    # Iterate over each expression and evaluate it\n    for expr in expressions:\n        \n        # Evaluate the expression and append the result to the result list\n        result.append(eval(expr))\n\n    # Return the result list as a tuple\n    return tuple(result)"}
{"problem":"def find_common_elements(lst1, lst2):\n    \"\"\"\n    Given two lists, return a new list containing the common elements between them.\n    Use slicing and None as a placeholder.\n\n    Args:\n    lst1 -- the first list\n    lst2 -- the second list\n\n    Returns:\n    A new list containing the common elements between lst1 and lst2.\n    \"\"\"","solution":"\n\n    common_elements = []\n\n    # TODO: Use slicing and None as a placeholder to find the common elements between lst1 and lst2\n    # HINT: You can iterate through one list and compare each element with the corresponding element in the other list using slicing and None as a placeholder.\n    # HINT: If an element in the first list is equal to the corresponding element or None in the second list, add it to common_elements.\n\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i] or lst2[i] is None:\n            common_elements.append(lst1[i])\n\n    return common_elements\n\n"}
{"problem":"def find_missing_items(items: list) -> list:\n\n    \"\"\"\n    This exercise requires the archaeologist to find the missing items in a given list of findings.\n\n    Args:\n    - items: A list containing the items found by the archaeologist.\n\n    Returns:\n    - A list of the missing items that the archaeologist needs to find.\n\n    Example:\n    find_missing_items([1, 2, 3, 5, 9]) -> [4, 6, 7, 8]\n    \"\"\"","solution":"\n\n    # Determine the minimum and maximum values in the given list\n    min_item = min(items)\n    max_item = max(items)\n\n    # Generate a range of numbers from the minimum to the maximum item, inclusive\n    complete_range = list(range(min_item, max_item + 1))\n\n    # Initialize an empty list to store the missing items\n    missing_items = []\n\n    # Iterate through the complete range\n    for num in complete_range:\n        # Check if the current number from the complete range is not in the given items list\n        if num not in items:\n            # Append the missing number to the missing_items list\n            missing_items.append(num)\n\n    return missing_items\n\n"}
{"problem":"def animal_times_two(animal_1, animal_2):\n    \"\"\"\n    This function takes in two animals and returns the result of multiplying their values.\n    However, one of the animals needs to be either a land animal or a water animal.\n    Your task is to complete the code by using the AND and XOR operators to check the following conditions:\n    - If both animals are land animals, return 0.\n    - If both animals are water animals, return 0.\n    - If one animal is a land animal and the other is a water animal, return the product of the animals' values.\n    \n    Args:\n    animal_1 (int): The value of the first animal.\n    animal_2 (int): The value of the second animal.\n    \n    Returns:\n    int: The result of multiplying the animals' values based on the given conditions.\n    \"\"\"","solution":"\n    if (animal_1 == 0 and animal_2 != 0) or (animal_1 != 0 and animal_2 == 0):  # Check if one animal is a land animal and the other is a water animal\n        return animal_1 * animal_2\n    elif animal_1 == 0 and animal_"}
{"problem":"def tuples_and_infinite_loops(aerospace_element: str) -> tuple:\n\n    \"\"\"This exercise explores the concepts of tuples and infinite loops in the context\n    of aerospace engineering. Your task is to complete the code by implementing the\n    missing parts and ensuring an infinite loop that manipulates the given aerospace\n    element as a tuple.\n\n    Args:\n    - aerospace_element (str): The aerospace element to be manipulated.\n\n    Returns:\n    - tuple: The modified aerospace element.\n    \"\"\"","solution":"\n\n    # Initialize an empty tuple to store the modified aerospace element\n    modified_element = ()\n\n    # Enable infinite loop to manipulate the element as a tuple\n    while True:\n\n        # Prompt the user to choose an option\n        print(\"Please select an option:\")\n        print(\"1. Remove duplicate characters in the aerospace element.\")\n        print(\"2. Reverse the order of characters in the aerospace element.\")\n        print(\"3. Count the occurrence of a specific character in the aerospace element.\")\n        print(\"4. Exit the program.\")\n\n        # Get user's choice\n        choice = input(\"Enter your choice (1\/2\/3\/4): \")\n\n        # Option 1: Remove duplicate characters\n        if choice == \"1\":\n"}
{"problem":"def unique_pairs(membership_list):\n\n    \"\"\"\n    Given a list of names representing the members in a biomedical engineering team, \n    this function returns a list of all unique pairs of team members.\n\n    Example:\n    >>> unique_pairs([\"Alice\", \"Bob\", \"Charlie\"])\n    [(\"Alice\", \"Bob\"), (\"Alice\", \"Charlie\"), (\"Bob\", \"Charlie\")]\n\n    Args:\n    - membership_list: A list of strings representing the names of the team members\n    \n    Returns:\n    - A list of tuples representing all unique pairs of team members\n    \"\"\"","solution":"\n\n    pairs = []\n    n = len(membership_list)\n\n    # Iterate over each member in the membership_list\n    for i in range(n):\n        # Iterate over the remaining members in the membership_list\n        for j in range(i+1, n):\n            # Append the unique pair of members to the pairs list\n            pairs.append((membership_list[i], membership_list[j]))\n\n    return pairs"}
{"problem":"def unconditioned_ternary_operator_or_operator(input1, input2, input3):\n    \"\"\"\n    Given three inputs (input1, input2, input3), the function should return the value of input1 if it is True, otherwise it should return the value of input2 if it is True, otherwise it should return the value of input3.\n    \"\"\"","solution":"\n\n    return input1 if input1 or input2 or input3 else input2\n\n"}
{"problem":"def intersection_of_loops(list_1, list_2):\n\n    \"\"\"\n    This exercise focuses on list comprehension and executing nested loops.\n    Given two lists, list_1 and list_2, your task is to find the common elements between them using list comprehension.\n    \"\"\"","solution":"\n\n    common_elements = []\n\n    # Iterate through each element in list_1\n    for element_1 in list_1:\n\n        # Iterate through each element in list_2\n        for element_2 in list_2:\n\n            # Check if the elements are equal\n            if element_1 == element_2:\n\n                # Append the common element to the common_elements list\n                common_elements.append(element_1)\n\n    return common_elements\n\n\n"}
{"problem":"def dancer_moves(dancers: set[str]) -> set[str]:\n    \"\"\"\n    Given a set of dancers, the function takes two nested loops to generate all possible dance moves\n    by pairing each dancer with every other unique dancer in the set. Each dance move is formed by\n    combining the names of the two dancers with a \"+\" sign in between.\n    \n    Args:\n    - dancers: A set of strings representing the names of dancers.\n    \n    Returns:\n    - A set of strings representing all possible dance moves generated from the pairs of dancers.\n    \"\"\"","solution":"\n    dance_moves = set()  # Initialize an empty set to store dance moves\n    \n    for dancer1 in dancers:\n        for dancer2 in dancers:\n            if dancer1 != dancer2:  # Avoid pairing a dancer with themselves\n                dance_move = dancer1 + \"+\" + dancer2  # Combine dancer names with \"+\"\n                dance_moves.add(dance_move)  # Add dance move to the set of dance moves\n    \n    return dance_moves\n\n# Example usage\ndancers = {\"Alice\", \"Bob\", \"Charlie\"}\ndance_moves = dancer_moves(dancers)\nprint(dance_moves)\n# Output: {'Alice+Charlie', 'Charlie+Bob', 'Bob+"}
{"problem":"def modify_tuples(architects: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n    Given a list of tuples containing architects' names and their ages,\n    modify the ages of the architects which are above 30 to their square root.\n\n    Example:\n    Input: [('John', 25), ('Emily', 33), ('Oliver', 42)]\n    Output: [('John', 5), ('Emily', 33), ('Oliver', 6)]\n\n    Args:\n    - architects: List of tuples containing architects' names (str) and ages (int)\n\n    Returns:\n    - List of tuples with modified ages\n    \"\"\"","solution":"\n\n    return [(name, age**0.5 if age > 30 else age) for name, age in architects]\n\n\n"}
{"problem":"def calculate_animal_population(target_population: int, current_population: int) -> int:\n\n    \"\"\"A zoologist wants to determine how many more animals need to be removed \n    from a specific area to achieve the target population. \n    Complete the function by subtracting the current population from the target population \n    and return the result.\n    \n    Args:\n    target_population (int): The desired population of animals in the area.\n    current_population (int): The current population of animals in the area.\n    \n    Returns:\n    int: The number of additional animals that need to be removed.\n    \"\"\"","solution":"\n\n    # Subtract the current population from the target population\n    remaining_population = target_population - current_population\n    return remaining_population\n\n"}
{"problem":"def concatenate_and_check(actor1, actor2):\n    \"\"\"\n    This exercise requires concatenating two strings and then using the 'is' operator\n    to check if the resulting string is equal to a specific value.\n    \n    Given an actor's first and last name, concatenate them by adding a space in between.\n    Then, using the 'is' operator, check if the resulting string is equal to 'Leonardo DiCaprio'.\n    Return True if they are equal, False otherwise.\n    \n    Args:\n    actor1 (str): The actor's first name.\n    actor2 (str): The actor's last name.\n    \n    Returns:\n    bool: True if the concatenated string is equal to 'Leonardo DiCaprio', False otherwise.\n    \n    Example:\n    >>> concatenate_and_check('Leonardo', 'DiCaprio')\n    True\n    >>> concatenate_and_check('Brad', 'Pitt')\n    False\n    \"\"\"","solution":"\n    full_name = actor1 + \" \" + actor2\n    \n    return full_name is 'Leonardo DiCaprio'"}
{"problem":"def combine_strings_with_loop(strings_list: List[str]) -> str:\n    \"\"\"\n    Takes a list of strings and combines them into a single string using a loop.\n\n    Args:\n        strings_list: A list of strings.\n\n    Returns:\n        The combined string.\n    \"\"\"","solution":"\n    result = ''\n    for string in strings_list:\n        result += string\n    return result\n\n\n"}
{"problem":"def intersection_of_lists(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Takes two lists of integers and returns their intersection using a loop.\n\n    Args:\n        list1: A list of integers.\n        list2: A list of integers.\n\n    Returns:\n        A list containing the common elements between list1 and list2.\n    \"\"\"","solution":"\n    intersection = []\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                intersection.append(num1)\n    return intersection\n\n\n"}
{"problem":"def nested_loop_exercise(sequence):\n    \"\"\"\n    This exercise requires you to iterate over a sequence using nested loops.\n    \n    Given a sequence of numbers, you need to find all the pairs of numbers that sum up to a given target value.\n    Your task is to complete the code to find and return a list of tuples, where each tuple represents a pair of numbers\n    that sum up to the target value.\n    \n    Args:\n    - sequence (list): The sequence of numbers to iterate over.\n    \n    Returns:\n    - list: List of tuples representing pairs of numbers that sum up to the target value.\n    \"\"\"","solution":"\n    \n    # Define the target value\n    target = 10\n    \n    # List to store the pairs\n    pairs = []\n    \n    # TODO: Complete the nested loops to find the pairs of numbers that sum up to the target value\n    for i in range(len(sequence)):\n        for j in range(i + 1, len(sequence)):\n            if sequence[i] + sequence[j] == target:\n                # Add the pair of numbers to the list\n                pairs.append((sequence[i], sequence[j]))\n    \n    return pairs\n\n\n"}
{"problem":"def dance_routine(dancer, routine):\n    \"\"\"\n    Dancer performs a dance routine by modifying the elements using indexing.\n\n    Args:\n    dancer: A list of dance moves performed by the dancer.\n    routine: A list of elements that need to be modified using indexing.\n\n    Returns:\n    None\n    \"\"\"","solution":"\n    # Iterate over each element in the routine\n    for element in routine:\n        # Extract the necessary information from the element\n        move, start_index, end_index = element\n\n        # Ensure the start_index is within the range of the dancer's moves\n        if start_index >= 0 and start_index < len(dancer):\n            # Modify the dancer's moves based on the given start_index and end_index\n            dancer[start_index] = move * (end_index - start_index + 1)\n\n    # Print the final dance routine of the dancer\n    print(\"Final Dance Routine:\")\n    for move in dancer:\n        print(move)\n\n# Example usage\ndancer_moves = [\"Jump\", \"Spin\", \"Twirl\", \"Slide\", \"Kick\"]\nroutine_elements = [(\"Shake\", 0, 2), (\"Clap\", 1, 3), (\"Jump\", 3, 4"}
{"problem":"def remove_and_concatenate(lst1, lst2):\n\n    \"\"\"\n    The function takes two lists as input and performs the following operations:\n    1. Removes all elements from lst1 that are present in lst2.\n    2. Concatenates the remaining elements in lst1 and lst2, ensuring no duplicates.\n    Finally, it returns the concatenated list.\n\n    Args:\n    lst1 (list): First list of elements\n    lst2 (list): Second list of elements\n\n    Returns:\n    list: Concatenated list with elements from both input lists\n\n    \"\"\"","solution":"\n\n    # Remove elements from lst1 that are present in lst2\n    for element in lst2:\n        if element in lst1:\n            lst1.remove(element)\n\n    # Concatenate the remaining elements from lst1 and lst2 without duplicates\n    concatenated_list = lst1 + lst2\n\n    # Remove duplicate elements from the concatenated list\n    concatenated_list = list(set(concatenated_list))\n\n    return concatenated_list\n\n"}
{"problem":"def dancer_matrix_multiplication(matrix1, matrix2):\n    \"\"\"\n    This function performs matrix multiplication using nested loops for a dancer routine.\n\n    Args:\n    matrix1 (list): The first matrix to be multiplied\n    matrix2 (list): The second matrix to be multiplied\n\n    Returns:\n    list: The resulting matrix after matrix multiplication\n    \"\"\"","solution":"\n\n    # Check if multiplication is possible\n    if len(matrix1[0]) != len(matrix2):\n        raise ValueError(\"The number of columns in matrix1 must match the number of rows in matrix2\")\n\n    # Initialize the resulting matrix with zeros\n    result_matrix = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))]\n\n    # Multiply the matrices\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result_matrix[i][j] += matrix1[i][k] * matrix2[k][j]\n\n    # Return the resulting matrix\n    return result_matrix"}
{"problem":"def calculate_distance(points):\n    \"\"\"\n    This function takes a list of points and calculates the total distance between each consecutive pair of points.\n\n    Args:\n    - points: a list of points represented as tuples (x, y)\n\n    Returns:\n    - distance: the total distance between all pairs of points\n    \"\"\"","solution":"\n\n    distance = 0\n    for i in range(len(points) - 1):\n        # Calculate the Euclidean distance between two consecutive points\n        x1, y1 = points[i]\n        x2, y2 = points[i + 1]\n        pair_distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n        # Update the total distance by adding the pair distance\n        # Fill in the code below to complete the statement\n        distance += pair_distance\n\n    return distance\n\n"}
{"problem":"def find_common_crops(farmer1_crops, farmer2_crops):\n    \"\"\"\n    This function finds the common crops between two farmers.\n\n    Args:\n    farmer1_crops (list): List of crops grown by farmer 1\n    farmer2_crops (list): List of crops grown by farmer 2\n\n    Returns:\n    common_crops (list): List of common crops grown by both farmers\n    \"\"\"","solution":"\n\n    common_crops = []\n\n    for crop in farmer1_crops:\n        if crop not in farmer2_crops:\n            continue  # Skip to the next iteration if crop not in farmer2_crops\n\n        common_crops.append(crop)\n\n    return common_crops\n\n"}
{"problem":"def identify_architect(age, experience, skills):\n    \"\"\"\n    This function determines whether a person qualifies as an architect based on their age, experience, and skills.\n\n    Args:\n    age (int): The age of the person.\n    experience (int): The experience (in years) of the person.\n    skills (list): A list of skills possessed by the person.\n\n    Returns:\n    str: A message indicating whether the person qualifies as an architect or not.\n    \"\"\"","solution":"\n\n    if age < 25:\n        return \"Sorry, you must be at least 25 years old to be considered as an architect.\"\n\n    if experience < 5:\n        return \"Sorry, you must have at least 5 years of experience to be considered as an architect.\"\n\n    if \"design\" not in skills or \"planning\" not in skills or \"construction\" not in skills:\n        return \"Sorry, you must possess design, planning, and construction skills to be considered as an architect.\"\n\n    return \"Congratulations! You qualify as an architect.\"\n\n"}
{"problem":"def find_intersection(coordinates1, coordinates2):\n    \"\"\"\n    This function finds the intersection of two sets of coordinates.\n    \n    Args:\n        coordinates1 (list): The first set of coordinates as a list of tuples.\n        coordinates2 (list): The second set of coordinates as a list of tuples.\n    \n    Returns:\n        list: The intersection of the two sets of coordinates.\n    \"\"\"","solution":"\n    intersection = []\n    for coord1 in coordinates1:\n        for coord2 in coordinates2:\n            if coord1 == coord2:\n                intersection.append(coord1)\n                break\n    return intersection\n\n"}
{"problem":"def calculate_land_area(geographical_data):\n\n    \"\"\"\n    This function calculates the total land area of a given region based on the geographical data.\n\n    Args:\n    geographical_data (list): A list of geographical features including the name and area of each feature.\n\n    Returns:\n    float: The total land area of the region.\n\n    \"\"\"","solution":"\n\n    land_area = 0\n\n    for feature in geographical_data:\n        if feature['type'] == 'land':\n            land_area += feature['area']\n\n    return land_area\n\n\n"}
{"problem":"def calculate_max_load(design_limit, material_strength, safety_factor):\n    \"\"\"\n    Calculates the maximum load that a structure can handle.\n    \n    Args:\n    - design_limit (float): The maximum allowable load specified in the design code.\n    - material_strength (float): The ultimate strength of the material used in the structure.\n    - safety_factor (float): The safety factor used to account for uncertainties in loads and materials.\n    \n    Returns:\n    - max_load (float): The maximum load that the structure can handle.\n    \"\"\"","solution":"\n    max_load = 0\n    \n    for i in range(int(design_limit+1)):\n        load = i * material_strength\n        \n        if load >= (design_limit * safety_factor):\n            break\n\n        max_load = load\n    \n    return max_load\n"}
{"problem":"def find_intersection(athletes):\n    \"\"\"\n    This function takes a list of athletes' names and returns a list\n    of the athletes who participate in all the sports given.\n\n    Args:\n    athletes (list): A list of athletes' names.\n\n    Returns:\n    list: A list of athletes who participate in all sports.\n    \"\"\"","solution":"\n\n    # Initialize the common_athletes list with the first athlete's sports\n    common_athletes = athletes[0]\n\n    # Iterate over the remaining athletes\n    for athlete in athletes[1:]:\n        \n        # Temporary list to store common sports for current athlete\n        temp_common_sports = []\n        \n        # Iterate over the sports of each athlete\n        for sport in athlete:\n            \n            # Check if the sport is in common_athletes list\n            if sport in common_athletes:\n                \n                # If sport exists in common_athletes list, append it to temp_common_sports\n                temp_common_sports.append(sport)\n        \n        # Update the common_athletes list with the intersection of sports\n        common_athletes = temp_common_sports\n    \n    # Return the final list of athletes participating in all sports\n    return common_athletes"}
{"problem":"def copy_and_loop(list1, list2):\n    \"\"\"\n    Given two lists of integers, copy the common elements from both lists into a new list.\n    Iterate over each element of both lists using a loop and add the common elements to a new list.\n    Return the new list containing the common elements.\n    \"\"\"","solution":"\n\n    common_elements = []\n    \n    # Your code here\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                if num1 not in common_elements:\n                    common_elements.append(num1)\n    \n    return common_elements\n\n\n"}
{"problem":"def create_tuple_from_string_and_subtraction(string: str, subtract: bool) -> tuple:\n    \"\"\"\n    This function takes a string as input and subtracts the ASCII value of each character \n    from its corresponding index in the string. It returns a tuple of the calculated results.\n\n    Args:\n    - string: A string representing the input text.\n    - subtract: A boolean indicating whether subtraction should be performed.\n\n    Returns:\n    - A tuple containing the calculated results.\n\n    Example:\n    >>> create_tuple_from_string_and_subtraction(\"Code\", True)\n    (-2, 100, 101, 97)\n    \"\"\"","solution":"\n\n    result = ()\n    for i, char in enumerate(string):\n        if subtract:\n            result += (ord(char) - i,)\n        else:\n            result += (ord(char) + i,)\n\n    return result\n\n"}
{"problem":"def get_common_elements(list1, list2):\n\n    \"\"\"\n    Given two lists, find the common elements between them.\n    \n    Args:\n    list1: A list of elements.\n    list2: Another list of elements.\n    \n    Returns:\n    A list containing the common elements found between list1 and list2.\n    \n    Example:\n    >> get_common_elements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])\n    Output: [4, 5]\n    \"\"\"","solution":"\n\n    common_elements = []\n\n    # Loop through every element in list1\n    for element in list1:\n        # Check if the element is in list2 and not already in common_elements\n        if element in list2 and element not in common_elements:\n            common_elements.append(element)\n\n    return common_elements"}
{"problem":"def count_vowels(name):\n    \"\"\"\n    This exercise requires you to manipulate strings and understand the concept of short-circuiting with if-else.\n    \n    Write a function that takes a string as input and returns the count of vowels in that string. \n    \n    You must use a loop to iterate through each character of the string and an if-else statement to check if the character is a vowel.\n    However, you should express the if-else statement in a way that utilizes short-circuiting to improve performance.\n    \n    Note: Consider both uppercase and lowercase vowels.\n    \n    Example:\n    count_vowels(\"Astronomer\") -> 4\n    \n    Explanation:\n    The string \"Astronomer\" has 4 vowels: 'A', 'o', 'e', 'e'.\n    \"\"\"","solution":"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    \n    for char in name:\n        if char in vowels:\n            count += 1\n    \n    return count"}
{"problem":"def can_dance(dancer, dancers):\n\n\"\"\"Given a list of dancers, return True if the given dancer is present in the first half and also if the given dancer is taller than all the other dancers in the second half of the list. Otherwise, return False.\"\"\"","solution":"\n\n# Extract the first half of the given dancers list and assign it to a variable named first_half\nfirst_half = dancers[:len(dancers)\/\/2]\n\n# Extract the second half of the given dancers list and assign it to a variable named second_half\nsecond_half = dancers[len(dancers)\/\/2:]\n\n# Check if the given dancer is present in the first half and if the given dancer is taller than all the other dancers in the second half\nif dancer in first_half and all(dancer > other_dancer for other_dancer in second_half):\n    return True\nelse:\n    return False"}
{"problem":"def create_typed_tuple(selection: str) -> tuple:\n    \"\"\"\n    Given a selection of historical events, create a tuple of tuples using the tuple() function.\n\n    Args:\n    - selection (str): A string representing historical events, separated by semicolons.\n\n    Returns:\n    - tuple: A tuple of tuples, where each inner tuple contains the event name and its year.\n    \"\"\"","solution":"\n\n    events = selection.split(\";\")  # Split the selection by semicolons\n    event_tuples = []  # Store each event as a tuple\n\n    for event in events:\n        event_year = \"\"  # Variable to store the year of the event\n        event_name = \"\"  # Variable to store the name of the event\n\n        # Extract the event name and year from the selection\n        for char in event:\n            if char.isdigit():\n                event_year += char\n            else:\n                event_name += char\n\n        # Ignore events without year information\n        if event_year != \"\":\n            event_tuple = (event_name.strip(), int(event_year.strip()))  # Create the tuple containing the event name and year\n            event_tuples.append(event_tuple)  # Add the tuple to the list of event tuples\n\n    return tuple(event"}
{"problem":"def farmer_cows_tuple():\n    \n    \"\"\"\n    A farmer wants to keep track of the number of cows she owns.\n    \n    You need to write a function that takes an integer argument 'num_cows' and returns a tuple \n    consisting of consecutive numbers starting from 1 up to the given 'num_cows'.\n    \n    For example, if the input is 4, the function should return (1, 2, 3, 4).\n    \n    Complete the code to solve the exercise.\n    \"\"\"","solution":"\n    \n    num_cows = int(input(\"Enter the number of cows: \"))  # Get the number of cows from the user\n    \n    cows = ()  # Initialize an empty tuple\n    \n    # Write a while loop to populate the 'cows' tuple with consecutive numbers from 1 to 'num_cows'\n    i = 1  # Start the counter at 1\n    while i <= num_cows:\n        # Add the current number to the tuple\n        cows += (i,)  # Note the use of parentheses inside the parentheses to create a singleton tuple\n        i += 1  # Increment the counter\n        \n    return cows\n\n"}
{"problem":"def precedence_of_logical_operators_and_creating_a_set():\n    \"\"\"\n    Given a list of logical expressions, prioritize the evaluation of the logical operators\n    and create a set with the results of each expression.\n\n    Logical expressions:\n    - expr1: result of (True and False) or True or False\n    - expr2: result of not (True and False) or (not (True or False))\n    \n    Returns:\n    A set containing the results of each logical expression.\n\n    Example:\n    Input:\n    No input required.\n\n    Output:\n    {False, True}\n    \"\"\"","solution":"\n\n    # Precedence of logical operators:\n    # not -> and -> or\n\n    result1 = (True and False) or True or False\n    result2 = not (True and False) or (not (True or False))\n\n    # Creating a set with the results\n    results = {result1, result2}\n\n    return results"}
{"problem":"def calculate_average_income(data):\n    \"\"\"\n    Given a list of dictionaries containing information on income and population,\n    calculate the average income per person.\n\n    Args:\n    - data (list): List of dictionaries, where each dictionary contains 'income'\n                   and 'population' keys.\n\n    Return:\n    - average_income (float): Average income per person.\n\n    Example:\n    calculate_average_income([{'income': 50000, 'population': 1000},\n                             {'income': 60000, 'population': 2000},\n                             {'income': 40000, 'population': 1500}])\n    Output: 44.444 (rounded to 3 decimal places)\n    \"\"\"","solution":"\n    total_income = 0.0\n    total_population = 0\n\n    for entry in data:\n        # Access the income and population values from each dictionary\n        income = entry['income']\n        population = entry['population']\n\n        # Calculate the total income and population\n        total_income += income\n        total_population += population\n\n    # Calculate the average income per person\n    average_income = total_income \/ total_population\n\n    return round(average_income, 3)\n\n\n"}
{"problem":"def calculate_mean(numbers):\n\n    \"\"\"\n    This function takes a list of integers as input and calculates the mean (average) of the numbers.\n    \"\"\"","solution":"\n    \n    # Check if the input is empty\n    if len(numbers) == 0:\n        return None\n\n    # Calculate the sum of all numbers\n    sum_of_numbers = sum(numbers)\n\n    # Calculate the mean by dividing the sum by the number of elements\n    mean = sum_of_numbers \/ len(numbers)\n\n    return mean\n\n\n"}
{"problem":"def calculate_median(numbers):\n\n    \"\"\"\n    This function takes a list of integers as input and calculates the median (middle value) of the numbers.\n    In case of an even number of elements, the average of the two middle values is returned.\n    \"\"\"","solution":"\n\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Check if the input is empty\n    if len(sorted_numbers) == 0:\n        return None\n\n    # Calculate the index of the middle element\n    mid_index = len(sorted_numbers) \/\/ 2\n\n    # Check if the number of elements is odd\n    if len(sorted_numbers) % 2 == 1:\n        median = sorted_numbers[mid_index]\n    else:\n        # Calculate the"}
{"problem":"def calculate_strength_diff(selection, intensity):\n    \"\"\"\n    This exercise aims to simulate a physical therapy session for calculating the difference in strength of the selected muscles.\n    \n    Args:\n        selection (list): A list of muscle groups selected for evaluation.\n        intensity (float): The intensity level applied during the evaluation.\n        \n    Returns:\n        dict: A dictionary containing the complex conjugate and absolute value of the difference in strength for each selected muscle group.\n    \"\"\"","solution":"\n    \n    results = {}\n    \n    for muscle in selection:\n        # Simulating strength evaluation process\n        measured_strength = some_physical_therapy_method(muscle, intensity)\n        \n        # Perform complex conjugate and absolute calculation\n        conjugate = measured_strength.conjugate()\n        absolute_value = abs(measured_strength)\n        \n        results[muscle] = {'Conjugate': conjugate, 'Absolute Value': absolute_value}\n    \n    return results\n\n# Example usage:\nselected_muscles = ['Quadriceps', 'Hamstrings', 'Gluteus Maximus']\nintensity_level = 0.8\n\nstrength_differences = calculate_strength_diff(selected_muscles, intensity_level)\nprint(strength_differences)\n\n# Output:\n# {\n#   'Quadr"}
{"problem":"def calculate_client_bill(hourly_rate, hours_worked, additional_charges):\n    \"\"\"\n    This function calculates the total bill for a graphic designer based on their hourly rate, hours worked, and any additional charges.\n\n    Parameters:\n    hourly_rate (float): The hourly rate of the graphic designer.\n    hours_worked (float): The number of hours worked by the graphic designer.\n    additional_charges (float): Any additional charges applied to the bill.\n\n    Returns:\n    float: The total bill for the graphic designer.\n    \"\"\"","solution":"\n\n    total_bill = 0.0\n\n    if hourly_rate > 0 and hours_worked > 0:\n        total_bill = hourly_rate * hours_worked\n\n        if additional_charges > 0:\n            total_bill += additional_charges\n\n    return total_bill\n\n\n"}
{"problem":"def calculate_harvest(farm):\n    \"\"\"\n    Calculates the total harvest count for a farmer's crops.\n    \n    Args:\n    - farm (list of lists): Represents the layout of the farm, where each sublist\n      represents a row and the elements within each sublist represent the number of\n      crops in that location.\n    \n    Returns:\n    - total_harvest (int): The total number of crops harvested from the farm.\n    \"\"\"","solution":"\n    \n    total_harvest = 0\n    \n    i = 0\n    while i < len(farm):\n        j = 0\n        while j < len(farm[i]):\n            if farm[i][j] > 0:\n                total_harvest += farm[i][j]\n            j += 1\n        i += 1\n    \n    return total_harvest\n\n# Example Usage:\nfarm = [[0, 5, 3, 0], [1, 0, 2, 4], [0, 0, 0, 0], [8, 2, 6, 0]]\ntotal_harvest = calculate_harvest(farm)\nprint(total_harvest)  # Output: 31"}
{"problem":"def find_patient_with_condition(patients, condition):\n    \"\"\"\n    Given a list of patients and a specific condition, \n    this function should return the first patient who has that condition.\n\n    Args:\n    - patients (list): A list of patient names (strings).\n    - condition (str): The condition to be searched for.\n\n    Returns:\n    - str: The name of the patient with the given condition or None if no patient has it.\n\n    Example:\n    >>> patients = [\"John Doe\", \"Alice Smith\", \"Jack Johnson\", \"Jane Brown\"]\n    >>> find_patient_with_condition(patients, \"flu\")\n    'John Doe'\n    >>> find_patient_with_condition(patients, \"covid\")\n    'Jack Johnson'\n    >>> find_patient_with_condition(patients, \"migraine\")\n    None\n    \"\"\"","solution":"\n\n    index = 0\n    while index < len(patients):\n        patient = patients[index]\n        if condition in patient:\n            return patient\n        index += 1\n    return None"}
{"problem":"def find_common_chars(str1, str2):\n    \"\"\"\n    This exercise is to help the Marketing Manager to find the common characters between two strings using an unconditioned ternary operator and a while loop.\n    The function takes two strings as arguments and returns a list of common characters found in both strings.\n\n    Example: \n    find_common_chars(\"hello\", \"world\") should return ['l', 'o'].\n\n    Your task is to complete the code below by using an unconditioned ternary operator and a while loop to solve the exercise.\n    \"\"\"","solution":"\n\n    common_chars = []\n    i = 0\n    while i < len(str1):\n        common_chars.append(str1[i]) if str1[i] in str2 else None\n        i += 1\n\n    return common_chars"}
{"problem":"def find_common_elements(rock1, rock2):\n\n    \"\"\"A geologist wants to find the common elements between two rocks.\n    The function takes in two lists, rock1 and rock2, which represent the composition of the rocks.\n    It returns a new list with the common elements found in both rocks.\n    Use the 'not in' operator to check if an element from rock1 exists in rock2.\n    Difficulty: Difficult\"\"\"","solution":"\n\n    common_elements = []\n\n    for element in rock1:\n        if element not in rock2:\n            continue\n        else:\n            common_elements.append(element)\n\n    return common_elements\n\n"}
{"problem":"def create_tuple_with_or_operator(books: list, movies: list) -> tuple:\n    \"\"\"\n    This function takes two lists of items and returns a tuple containing all the items that are present in at least one of the lists.\n\n    Args:\n    - books: A list of books.\n    - movies: A list of movies.\n\n    Returns:\n    - A tuple containing all the items that are present in at least one of the lists.\n\n    Example:\n    create_tuple_with_or_operator(['Harry Potter', 'Lord of the Rings'], ['The Godfather', 'Lord of the Rings'])\n    Output: ('Harry Potter', 'Lord of the Rings', 'The Godfather')\n    \"\"\"","solution":"\n\n    combined_list = books + movies  # Combine both lists\n    unique_items = list(set(combined_list))  # Remove duplicates\n    unique_items.sort()  # Sort the items alphabetically\n    result_tuple = tuple(unique_items)  # Convert list to tuple\n\n    return result_tuple\n\n\n"}
{"problem":"def librarian_check_book_returned(book_is_borrowed: bool, book_is_overdue: bool) -> bool:\n\n    \"\"\"\n    A librarian wants to check if a book has been returned and if it is overdue.\n    Complete the function 'librarian_check_book_returned' that takes in two boolean arguments:\n    - book_is_borrowed: indicating whether the book has been borrowed or not (True\/False)\n    - book_is_overdue: indicating whether the book is overdue or not (True\/False)\n\n    The function should return a boolean value:\n    - True if the book has been returned and is overdue\n    - False if the book has not been returned or is not overdue\n\n    For example:\n    - librarian_check_book_returned(True, True) should return True\n    - librarian_check_book_returned(True, False) should return False\n    - librarian_check_book_returned(False, True) should return False\n    - librarian_check_book_returned(False, False) should return False\n    \"\"\"","solution":"\n\n    return book_is_borrowed and book_is_overdue"}
{"problem":"def compare_lists(list1, list2):\n    \"\"\"\n    Given two lists, return a new list containing the elements that appear in both lists.\n\n    Example:\n    compare_lists([1, 2, 3, 4], [3, 4, 5, 6]) -> [3, 4]\n\n    Required knowledge: booleans, identity comparison, list iteration.\n    \"\"\"","solution":"\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Loop through the first list\n    for element in list1:\n\n        # Check if the element is also present in the second list using identity comparison\n        if element in list2 and element not in common_elements:  # INCOMPLETE\n\n            # Append the common element to the list\n            common_elements.append(element)\n\n    return common_elements"}
{"problem":"def calculate_total_income(income, expenses):\n    \"\"\"\n    Given two tuples containing income and expenses, return the total income after deducting expenses.\n\n    Args:\n        income (tuple): A tuple containing different sources of income.\n        expenses (tuple): A tuple containing different expenses.\n\n    Returns:\n        float: Total income after deducting expenses.\n    \"\"\"","solution":"\n    total_income = sum(income)\n  \n    for expense in expenses:\n        total_income -= expense\n      \n    return total_income\n\n"}
{"problem":"def calculate_net_profit(income, expenses):\n    \"\"\"\n    Given two tuples containing income and expenses, return the net profit after deducting expenses.\n\n    Args:\n        income (tuple): A tuple containing different sources of income.\n        expenses (tuple): A tuple containing different expenses.\n\n    Returns:\n        float: Net profit after deducting expenses.\n    \"\"\"","solution":"\n    net_profit = calculate_total_income(income, expenses)\n  \n    if net_profit < 0:\n        return 0\n    else:\n        return net_profit\n\n"}
{"problem":"def modify_element_coordinates(coordinates):\n\n    \"\"\"\n    This exercise focuses on a game developer's skill to modify the coordinates of game elements using a for loop.\n\n    The 'coordinates' parameter is a list containing the coordinates (x, y) of several game elements. Your task is to modify the second element's x-coordinate by adding 10 to its current value.\n\n    Complete the code below to solve the exercise.\n    \"\"\"","solution":"\n\n    for index, coord in enumerate(coordinates):\n        if index == 1:\n            coordinates[index] = (coord[0] + 10, coord[1])\n    \n    return coordinates\n\n"}
{"problem":"def update_tuple(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples, tuple1 and tuple2, and updates tuple1 with the elements from tuple2.\n    The updated tuple1 is returned.\n    \"\"\"","solution":"\n\n    # Convert the tuples to lists for easier manipulation\n    list1 = list(tuple1)\n    list2 = list(tuple2)\n\n    # Iterate through the elements of tuple2\n    for element in list2:\n        # Check if the element is already in tuple1\n        if element not in list1:\n            # Append the element to tuple1\n            list1.append(element)\n\n    # Convert the updated list1 back to a tuple\n    updated_tuple = tuple(list1)\n\n    # Return the updated tuple1\n    return updated_tuple\n\n"}
{"problem":"def diagnose_animal(sick_animals):\n    \"\"\"\n    Given a list of sick animals, this function diagnoses each animal\n    and determines the treatment needed. The function utilizes conditional\n    statements and nested loops to control the flow of the diagnosis \n    process.\n\n    Args:\n    sick_animals (list): A list of sick animals.\n\n    Returns:\n    list: A list of tuples, where each tuple contains the diagnosed animal\n    and the recommended treatment.\n\n    \"\"\"","solution":"\n\n    diagnoses = []\n\n    for animal in sick_animals:\n        print(f\"Diagnosing {animal}...\")\n\n        if animal == \"dog\" or animal == \"cat\":\n            symptoms = input(\"Please enter the symptoms: \").split(\", \")\n\n            if \"coughing\" in symptoms or \"sneezing\" in symptoms:\n                treatment = \"antibiotics\"\n\n            elif \"itching\" in symptoms or \"hair loss\" in symptoms:\n                treatment = \"antiparasitic medication\"\n\n            elif \"vomiting\" in symptoms or \"diarrhea\" in symptoms:\n                treatment = \"antiemetics\"\n\n            else:\n                treatment = \"unknown\"\n\n        elif animal == \"bird\":\n            print(\"Birds have respiratory symptoms"}
{"problem":"def replace_elements(lst1, lst2, idx1, idx2):\n    \"\"\"\n    Given two lists lst1 and lst2, and two indices idx1 and idx2, this function returns a new list in which the elements \n    from idx1 to idx2 (inclusive) in lst1 are replaced by the elements in lst2.\n    \n    Args:\n    - lst1: A list of elements (e.g., integers, strings).\n    - lst2: A list of elements (e.g., integers, strings).\n    - idx1: An integer representing the starting index.\n    - idx2: An integer representing the ending index.\n    \n    Returns:\n    - A new list with replaced elements.\n    \n    Example:\n    replace_elements([1, 2, 3, 4, 5], ['a', 'b', 'c'], 1, 3)\n    Output: [1, 'a', 'b', 'c', 5]\n    \"\"\"","solution":"\n    return lst1[:idx1] + lst2 + lst1[idx2+1:]\n\n"}
{"problem":"def calculate_distance(point1, point2):\n    \"\"\"Function to calculate the distance between two points\"\"\"","solution":"\n    \n    # Check if the points are valid representations of complex numbers\n    if (not isinstance(point1, complex)) or (not isinstance(point2, complex)):\n        return \"Invalid input!\"\n    \n    # Extract the real and imaginary parts of the complex numbers\n    x1 = point1.real\n    y1 = point1.imag\n    x2 = point2.real\n    y2 = point2.imag\n    \n    # Calculate the distance using Euclidean distance formula\n    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    \n    return distance\n\n"}
{"problem":"def find_nearest_point(point, points):\n    \"\"\"Function to find the nearest point to a given point\"\"\"","solution":"\n    \n    # Check if the given point is a valid representation of a complex number\n    if not isinstance(point, complex):\n        return \"Invalid input!\"\n    \n    # Initialize variables for storing the nearest point and its distance\n    nearest_point = None\n    min_distance = float('inf')\n    \n    # Iterate through all the points\n    for p in points:\n        # Check"}
{"problem":"def find_excluded_cases(cases: set, valid_cases: set) -> set:\n    \"\"\"\n    This function takes a set of cases and a set of valid cases as input, and returns a set of excluded cases.\n    Excluded cases refer to the cases that are not valid according to the given set of valid cases.\n\n    Args:\n    - cases: A set of cases (strings)\n    - valid_cases: A set of valid cases (strings)\n\n    Returns:\n    - A set of excluded cases (strings)\n    \"\"\"","solution":"\n\n    excluded_cases = set()\n\n    for case in cases:\n        is_excluded = True\n        for valid_case in valid_cases:\n            if valid_case == case:\n                is_excluded = False\n                break\n        if is_excluded:\n            excluded_cases.add(case)\n\n    return excluded_cases"}
{"problem":"def add_complex_numbers(complex_1, complex_2):\n    \"\"\"\n    Write a function that takes two complex numbers represented as pairs of floats (real, imag) and returns their sum.\n\n    Args:\n        complex_1 (tuple): A pair of floats representing the real and imaginary part of the first complex number.\n        complex_2 (tuple): A pair of floats representing the real and imaginary part of the second complex number.\n    \n    Returns:\n        tuple: A pair of floats representing the real and imaginary part of the sum of the two complex numbers.\n\n    Example:\n        >>> add_complex_numbers((2, 3), (-1, 5))\n        (1, 8)\n    \"\"\"","solution":"\n    real_part = complex_1[0] + complex_2[0]\n    imag_part = complex_1[1] + complex_2[1]\n    return real_part, imag_part\n\n\n"}
{"problem":"def calculate_total_cows(age):\n\n    \"\"\"\n    A farmer wants to calculate the total number of cows he will have based on the age of the cow. \n    The cow will reproduce every 3 years, starting from year 3. \n\n    You need to complete the code below to return the total number of cows the farmer will have after 'age' years.\n\n    Args:\n    age: an integer indicating the number of years for which the calculation should be done.\n\n    Returns:\n    An integer representing the total number of cows the farmer will have after 'age' years.\n    \"\"\"","solution":"\n\n    current_age = 3\n    cow_count = 1\n\n    # Run the loop 'age' times\n    while current_age <= age:\n        if current_age % 3 == 0:\n            cow_count *= 2  # Double the cow count if the current_age is a multiple of 3\n        current_age += 1\n\n    return cow_count\n\n"}
{"problem":"def modify_list_nested_loops(list1, list2):\n\n    \"\"\"\n    This function takes two lists as input and modifies the elements of the first list\n    based on the values from the second list using nested loops.\n\n    Args:\n    list1: A list of biomedical data.\n    list2: A list of values to modify the elements of list1.\n\n    Returns:\n    None\n\n    Example:\n    modify_list_nested_loops([1, 2, 3, 4, 5], [10, 20, 30, 40, 50])\n    After executing the function, list1 is modified as [11, 22, 33, 44, 55].\n    \"\"\"","solution":"\n\n    # Iterate over each element in list1\n    for i in range(len(list1)):\n        # Iterate over each element in list2\n        for j in range(len(list2)):\n            # Modify the element in list1 based on the value in list2\n            list1[i] += list2[j]\n    \n    print(list1)\n\n"}
{"problem":"def sum_of_evens(numbers):\n    \"\"\"\n    Given a list of integers, return the sum of all even numbers present in the list.\n    \"\"\"","solution":"\n    evens_sum = 0\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # Check if the number is divisible by 2 (even number)\n        if num % 2 == 0:\n            # Add the even number to the sum\n            evens_sum += num\n    \n    return evens_sum"}
{"problem":"def find_suspects(people_list, target_person):\n    \"\"\"\n    Given a list of people and a target person, find all the suspects that match the target person's description.\n\n    Args:\n    - people_list (list): A list of dictionaries, where each dictionary represents a person with properties such as name, age, height, and gender.\n    - target_person (dict): A dictionary representing the target person, whose description we want to match.\n\n    Returns:\n    - suspects (list): A list of dictionaries containing the suspects that match the target person's description.\n    \"\"\"","solution":"\n\n    suspects = []\n    for person in people_list:\n        if person['age'] == target_person['age']:\n            if person['height'] == target_person['height']:\n                if person['gender'] == target_person['gender']:\n                    if person['name'] == target_person['name']:\n                        suspects.append(person)\n\n    return suspects\n"}
{"problem":"def highest_score(athletes):\n\n    \"\"\"\n    This function receives a list of Athlete objects and returns the name of the athlete\n    with the highest score using ternary operator and list methods.\n    \"\"\"","solution":"\n\n    return sorted(athletes, key=lambda x: x.score)[-1].name if len(athletes) != 0 else None"}
{"problem":"def modify_list(name_list: list, start: int, end: int) -> None:\n    \"\"\"\n    Modifies elements of a list within the specified range.\n\n    Given a list of names, this function modifies the elements within the range specified by the start and end\n    indices (inclusive start, exclusive end). It capitalizes the first letter of each name within the range.\n\n    Args:\n    - name_list (list): A list of names.\n    - start (int): The starting index of the range (inclusive).\n    - end (int): The ending index of the range (exclusive).\n\n    Returns:\n    - None: The function modifies the input list in-place without returning anything.\n    \"\"\"","solution":"\n\n    for i in range(start, end):\n        if i < len(name_list):\n            name_list[i] = name_list[i].capitalize()\n        else:\n            break\n\n\n"}
{"problem":"def subtract_integers(a: int, b: int) -> int:\n    \"\"\"\n    This function subtracts two positive integers and returns the result.\n    \"\"\"","solution":"\n    # Subtracting b from a\n    result = a - b\n    return result\n\n# Example usage:\n# subtract_integers(10, 3) returns 7\n\n# Incomplete code - fill in the missing parts\n"}
{"problem":"def remove_duplicate(names):\n    \"\"\"\n    Given a list of names, remove any duplicate names and return the list without duplicates.\n\n    Args:\n    names (list): List of strings representing names\n\n    Returns:\n    list: List of strings with duplicates removed\n    \"\"\"","solution":"\n\n    unique_names = []\n   \n    for name in names:\n        # Check if name is already in unique_names\n        if name in unique_names:\n            continue\n        else:\n            unique_names.append(name)\n    \n    return unique_names\n\n\n"}
{"problem":"def find_actress(names, target_name):\n    \"\"\"\n    Given a list of names, find the actress with the matching target_name.\n\n    Args:\n    names (list): List of strings representing names\n    target_name (str): String representing the name of the target actress\n\n    Returns:\n    str: Name of the actress if found, otherwise \"Actress not found\"\n    \"\"\"","solution":"\n\n    for name in names:\n        # Check if current name matches target_name\n        if name == target_name:\n            return name\n    \n    # If no match found, return \"Actress not found\"\n    return \"Actress not found\"\n\n\n"}
{"problem":"def promo_discount_check(order_total, promo_code):\n\n    \"\"\"The function checks if a promo code is valid and calculates the discount for a marketing manager.\n    \n    Args:\n    order_total (float): The total amount of the order.\n    promo_code (str): The promo code entered by the customer.\n    \n    Returns:\n    float: The discounted total amount after applying the promo code (if valid).\n    \"\"\"","solution":"\n\n    discount = 0.0\n\n    if promo_code == \"SUMMER2021\":\n        # Apply a fixed percentage discount for the summer promotion\n        discount = order_total * 0.2\n    elif promo_code == \"HOLIDAYS2021\":\n        # Apply a fixed amount discount for the holidays promotion\n        discount = 50.0\n    else:\n        # No valid promo code entered, no discount applied\n        print(\"Invalid promo code. No discount applied.\")\n\n    return order_total - discount\n\n"}
{"problem":"def modify_officers_information(officers_dict, rank):\n    \"\"\"\n    This function takes a dictionary of police officers' information\n    and modifies their rank if their name is longer than 5 characters.\n\n    Args:\n    officers_dict (dict): A dictionary containing officers' information\n    rank (str): The new rank to assign to officers with long names\n\n    Returns:\n    dict: The modified dictionary with updated ranks for certain officers\n    \"\"\"","solution":"\n\n    for officer, details in officers_dict.items():\n        name_length = len(officer)\n        # Modify rank if officer's name is longer than 5 characters\n        if name_length > 5:\n            details['Rank'] = rank\n\n    return officers_dict\n\n\n# Example usage\npolice_officers = {\n    'John': {'Rank': 'Sergeant', 'Age': 35},\n    'Megan': {'Rank': 'Corporal', 'Age': 28},\n    'Jason': {'Rank': 'Officer', 'Age': 45},\n    'Alexandra': {'Rank': 'Captain', 'Age': 42},\n    'Richard': {'Rank': 'Lieutenant', 'Age': 39},\n    'Jonathan': {'Rank': '"}
{"problem":"def create_tuple_from_range(start: int, stop: int, step: int) -> tuple:\n\n    \"\"\"Create a tuple from a range of values\"\"\"","solution":"\n\n    # Use a list comprehension to generate a list of numbers within the given range\n    numbers = [i for i in range(start, stop, step)]\n\n    # Use the tuple() function to convert the list into a tuple\n    result = tuple(numbers)\n\n    return result"}
{"problem":"def intersection_subtraction(set1, set2):\n    \"\"\"\n    This exercise aims at practicing the practical application of loops with sets and subtraction.\n    Given two sets, the function should find the intersection of the sets and subtract the common elements from one of the sets.\n\n    Args:\n    set1 (set): The first set.\n    set2 (set): The second set.\n    \n    Returns:\n    set: A new set containing the elements from set1 excluding the common elements with set2.\n\n    Example:\n    set1 = {1, 2, 3, 4}\n    set2 = {3, 4, 5, 6}\n    intersection_subtraction(set1, set2) -> {1, 2}\n    \"\"\"","solution":"\n\n    # Find the intersection of the sets\n    intersection = set1 & set2\n    \n    # Subtract the common elements from set1\n    for element in intersection:\n        if element in set1:\n            set1.discard(element)\n    \n    # Return the modified set1\n    return set1\n\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\nresult = intersection_sub"}
{"problem":"def delete_duplicate_entries(data_list):\n    \"\"\"\n    You are given a list named 'data_list' which contains duplicate entries. Your task is to create a function \n    that removes all the duplicate elements from the list and returns the updated list.\n\n    Complete the 'delete_duplicate_entries' function below to solve the exercise.\n\n    Args:\n    data_list (list): A list of elements with duplicate entries.\n\n    Returns:\n    list: A list with all the duplicate entries removed.\n\n    Example:\n    Given the following input:\n    data_list = [1, 2, 2, 3, 4, 5, 5, 6, 6, 7]\n    The output should be:\n    [1, 2, 3, 4, 5, 6, 7]\n\n    Note:\n    You should not modify the original order of the elements in the list.\n    \"\"\"","solution":"\n\n    # Your code here\n\n    return list(set(data_list))\n\n\n"}
{"problem":"def find_and_modify_elements(dictionary):\n    \"\"\"\n    Given a dictionary of biomedical measurements, iterate over the dictionary and modify the elements by subtracting\n    their corresponding key values. Return the modified dictionary.\n\n    Args:\n    dictionary (dict): A dictionary of biomedical measurements where the keys are the measurement values and the values\n                       are the actual measurements.\n\n    Returns:\n    dict: A modified dictionary where each element is subtracted by its corresponding key value.\n\n    Example:\n    dictionary = {0: 10, 1: 20, 2: 30}\n    find_and_modify_elements(dictionary)\n    Output: {0: 10, 1: 19, 2: 28}\n    \"\"\"","solution":"\n\n    modified_dictionary = {}\n    for key, value in dictionary.items():\n        # Subtract key value from the element and store it in the modified dictionary\n        modified_dictionary[key] = value - key\n    \n    return modified_dictionary\n\n\n"}
{"problem":"def get_longest_subsequence(sequence1: str, sequence2: str) -> str:\n    \"\"\"\n    This function finds the longest common subsequence between two DNA sequences.\n\n    Args:\n        sequence1 (str): The first DNA sequence.\n        sequence2 (str): The second DNA sequence.\n\n    Returns:\n        str: The longest common subsequence.\n\n    Raises:\n        ValueError: If either of the sequences is empty.\n    \"\"\"","solution":"\n\n    if not sequence1 or not sequence2:\n        raise ValueError(\"Both sequences must have non-empty values.\")\n\n    # Generate all possible subsequences of sequence1\n    subsequences = []\n    for i in range(len(sequence1)):\n        for j in range(i, len(sequence1)):\n            subsequences.append(sequence1[i:j+1])\n\n    longest_subsequence = \"\"\n    max_length = 0\n\n    # Find the longest common subsequence\n    for subsequence in subsequences:\n        if subsequence in sequence2 and len(subsequence) > max_length:\n            longest_subsequence = subsequence\n            max_length = len(subsequence)\n\n    return longest_subsequence\n\n\n\n"}
{"problem":"def calculate_trajectory(time, acceleration, velocity):\n    \"\"\"\n    This function calculates the trajectory of a vehicle in the aerospace industry\n    given the time, acceleration, and velocity.\n\n    It uses a break statement and tuple concatenation and repeating to solve the problem.\n\n    Args:\n    time (float): Time in seconds.\n    acceleration (float): Acceleration in meters per second squared.\n    velocity (tuple): Tuple containing initial velocity in meters per second, final velocity\n        in meters per second, and time in seconds.\n\n    Returns:\n    float: The trajectory of the vehicle in meters.\n\n    Raises:\n    ValueError: If velocity is not a tuple or does not contain exactly 3 elements.\n    \"\"\"","solution":"\n\n    if not isinstance(velocity, tuple) or len(velocity) != 3:\n        raise ValueError(\"Velocity must be a tuple containing exactly 3 elements.\")\n\n    initial_velocity, final_velocity, time = velocity\n\n    if initial_velocity >= final_velocity:\n        return 0\n\n    trajectory = 0\n    while time <= time:\n        trajectory += initial_velocity * time + 0.5 * acceleration * time**2\n        time += 1\n\n        if final_velocity is not None and initial_velocity >= final"}
{"problem":"def append_engine_data(engine_data, new_elements):\n\n    \"\"\"Given a dictionary of engine data and a list of new elements, append the new elements to the engine data dictionary.\n\n    Args:\n    engine_data (dict): A dictionary containing engine data.\n    new_elements (list): A list of new elements to be appended to the engine data.\n\n    Returns:\n    dict: The updated engine data dictionary with new elements.\n\n    Raises:\n    TypeError: If the engine_data argument is not a dictionary.\n    ValueError: If the new_elements argument is not a list.\n\n    \"\"\"","solution":"\n\n    if not isinstance(engine_data, dict):\n        raise TypeError(\"The engine_data argument should be a dictionary.\")\n\n    if not isinstance(new_elements, list):\n        raise ValueError(\"The new_elements argument should be a list.\")\n\n    # Appending new_elements to engine_data\n    for element in new_elements:\n        if isinstance(element, dict):\n            for key, value in element.items():\n                if key in engine_data:\n                    engine_data[key].append(value)\n                else:\n                    engine_data[key] = [value]\n        else:\n            raise ValueError(\"Each element in the new_elements list should be a dictionary.\")\n\n    return engine_data\n\n\n"}
{"problem":"def remove_common_elements(list1, list2):\n    \"\"\"\n    This function removes the common elements between two lists using the complement operator.\n    Args:\n        list1: The first list.\n        list2: The second list.\n    Returns:\n        A new list obtained by removing the common elements between list1 and list2.\n    \"\"\"","solution":"\n\n    result = []\n    for element in list1:\n        if element not in list2:  # Check if the element is not present in list2\n            result.append(element)\n\n    return result\n\n"}
{"problem":"def print_numbers(n):\n    \"\"\"\n    This function takes an integer 'n' as input and prints all the numbers from 1 to n.\n    However, it skips the numbers that are divisible by 3 and 7 using break and continue statements.\n    Additionally, it prints a special message for numbers that are divisible by both 3 and 7.\n    \"\"\"","solution":"\n\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 7 == 0:\n            print(\"This number is divisible by both 3 and 7!\")\n            continue\n        elif i % 3 == 0:\n            # Complete the code\n            #\n            #\n            #\n            #\n            #\n            #\n        elif i % 7 == 0:\n            # Complete the code\n            #\n            #\n            #\n            #\n            #\n            #\n        else:\n            # Complete the code\n            #\n            #\n            #\n            #\n            #\n            #\n"}
{"problem":"def iterate_string(string):\n\n    \"\"\"\n    This exercise requires the aerospace engineer to iterate over each character of a given string and check if there are any short-circuiting conditions met during the string traversal.\n\n    Your task is to complete the code by implementing the logic to identify the short-circuiting condition. The short-circuiting condition occurs when the string contains the character '!', and if it occurs three times consecutively, the function should return True, indicating that the short-circuiting condition is met. If the condition is not met, the function should return False.\n\n    You have to complete the code within the function body below.\n    \"\"\"","solution":"\n\n    # Iterate over each character of the string\n    for i in range(len(string)):\n        if i >= len(string) - 2:\n            return False  # There are not enough characters left to reach the short-circuiting condition\n\n        if string[i] == '!' and string[i+1] == '!' and string[i+2] == '!':\n            return True  # Short-circuiting condition met\n    \n    return False  # No short-circuiting condition met\n    \n\n"}
{"problem":"def find_pollution_index(pollutants):\n\n    \"\"\"\n    Given a list of pollutant concentrations, determine the pollution index\n    based on the following criteria:\n    - If any of the pollutant concentrations is above 500, return \"Severe\"\n    - If any of the pollutant concentrations is above 200, return \"High\"\n    - If any of the pollutant concentrations is above 100, return \"Moderate\"\n    - If all pollutant concentrations are below or equal to 100, return \"Low\"\n    \n    Example:\n    >>> find_pollution_index([45, 120, 70])\n    'Moderate'\n    >>> find_pollution_index([30, 88, 95])\n    'Low'\n    >>> find_pollution_index([200, 350, 450, 600])\n    'Severe'\n    \"\"\"","solution":"\n\n    if any(pollutant > 500 for pollutant in pollutants):\n        return \"Severe\"\n    elif any(pollutant > 200 for pollutant in pollutants):\n        return \"High\"\n    elif any(pollutant > 100 for pollutant in pollutants):\n        return \"Moderate\"\n    else:\n        return \"Low\"\n\npoll"}
{"problem":"def remove_intersection(historical_events, important_years):\n    \"\"\"\n    This function takes two sets as arguments: historical_events and important_years.\n    It removes any historical events from the historical_events set if they contain a year present in the important_years set, and returns the modified historical_events set.\n    \"\"\"","solution":"\n\n    for event in historical_events:\n        for year in important_years:\n            if str(year) in event:\n                historical_events.remove(event)\n\n    return historical_events"}
{"problem":"def multiplication_examples(num1, num2, max_value):\n    \"\"\"\n    This exercise aims to test the skill of a Physical Therapist in implementing multiplication examples.\n    \n    The function should generate a list of multiplication examples using two numbers, 'num1' and 'num2'. \n    The multiplication examples should be limited to a maximum value of 'max_value'. \n    \n    Each example should have the format: \"{num1} x {num2} = {result}\"\n    \n    The function should return the list of multiplication examples.\n    \n    Example:\n    multiplication_examples(3, 4, 25) => ['3 x 4 = 12', '3 x 6 = 18', '3 x 8 = 24']\n    \"\"\"","solution":"\n\n    examples = []\n    result = num1 * num2\n    \n    for i in range(num2, max_value+1, num2):\n        examples.append(f\"{num1} x {i} = {num1*i}\")\n    \n    return examples\n\n"}
{"problem":"def tuple_operations(a: int, b: int) -> tuple:\n\n    \"\"\"This exercise aims to test your understanding of operations on integers and tuples.\n    In this exercise, you need to perform various operations using the given integers and tuples.\n    You are required to complete the code to solve each problem as stated in the instructions.\"\"\"","solution":"\n\n    # Problem 1: Calculate the sum of the given integers a and b and return as a tuple.\n    sum_tuple = (a + b,)\n\n    # Problem 2: Find the absolute difference between the given integers a and b and return as a tuple.\n    diff_tuple = (abs(a - b),)\n\n    # Problem 3: Calculate the product of the given integers a and b and return as a tuple.\n    product_tuple = (a * b,)\n\n    # Problem 4: Perform integer division of a by b and return the quotient and remainder as a tuple.\n    divmod_tuple = divmod(a, b)\n\n    # Problem 5: Calculate the average of the given integers a and b and return as a tuple.\n    average_tuple = ((a + b) \/ 2,)\n\n    return sum_tuple, diff_tuple, product_tuple, divmod"}
{"problem":"def calculate_patient_age(patient_birth_year, current_year):\n    \"\"\"\n    Calculates the age of a patient given their birth year and the current year.\n\n    Args:\n    - patient_birth_year: integer representing the patient's birth year\n    - current_year: integer representing the current year\n\n    Returns:\n    - age: integer representing the patient's age\n    \"\"\"","solution":"\n\n    age = current_year - patient_birth_year\n    return age\n\n\n"}
{"problem":"def is_medicare_eligible(patient_age):\n    \"\"\"\n    Determines if a patient is eligible for Medicare based on their age.\n\n    Args:\n    - patient_age: integer representing the patient's age\n\n    Returns:\n    - eligible: boolean indicating if the patient is eligible for Medicare (True) or not (False)\n    \"\"\"","solution":"\n\n    if patient_age >= 65:\n        return True\n    else:\n        return False\n\n\n"}
{"problem":"def count_none_characters(string: str) -> int:\n\n    \"\"\"\n    Given a string, count the number of characters that are 'None' when using conditional statements.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    int: The count of characters that are 'None'.\n\n    Example:\n    >>> count_none_characters(\"Hello! None of these characters should be counted.\")\n    0\n    >>> count_none_characters(\"Some characters are None.\")\n    2\n    \"\"\"","solution":"\n\n    count = 0\n\n    for char in string:\n        if None:\n            count += 1\n\n    return count\n\n"}
{"problem":"def append_and_create_list(data, element):\n    \"\"\"\n    Given a list of data, append a new element to it and create a new list.\n    \n    Parameters:\n    data (list): A list of elements.\n    element: The element to be appended to the list.\n    \n    Returns:\n    list: The updated list with the new element appended.\n    \"\"\"","solution":"\n    # Create a new list by copying the original list\n    new_list = data[:]\n    \n    # Append the new element to the list\n    new_list.append(element)\n    \n    return new_list\n\n\n# Environmental Scientist code\noriginal_data = [1, 2, 3, 4, 5]\nnew_element = 6\n\n# Call the function to create a new list with the appended element\nupdated_list = append_and_create_list(original_data, new_element)\n\nprint(f\"The original data list is: {original_data}\")\nprint(f\"The updated list with the new element is: {updated_list}\")"}
{"problem":"def find_sum(arr):\n    \"\"\"\n    Given a list of numbers, find the sum of all the numbers that are divisible by 3 and belong to the range of 1 to n.\n\n    Args:\n    arr (list): A list of positive integers\n\n    Returns:\n    int: Sum of numbers divisible by 3 and are in the range of 1 to n\n    \"\"\"","solution":"\n\n    try:\n        n = int(input(\"Enter a positive integer: \"))\n\n        if n <= 0:\n            print(\"Invalid input! Please enter a positive integer.\")\n            return\n\n        num_sum = 0\n\n        for i in range(1, n+1):\n            try:\n                if i % 3 == 0:\n                    num_sum += arr[i-1]\n            except IndexError:\n                print(\"Index out of range! Skipping the current number.\")\n                continue\n\n        return num_sum\n\n    except ValueError:\n        print(\"Invalid input! Please enter a positive integer.\")\n\n"}
{"problem":"def find_available_books(library_catalog: list):\n    \"\"\"\n    A librarian needs to find all the available books in the library's catalog.\n    The library catalog is a list of dictionaries, where each dictionary represents a book, \n    with keys 'Title', 'Author', and 'Available'.\n    The librarian wants to iterate over the catalog using a for loop and filter the available books only.\n    The function should return a new list containing only the available books.\n\n    :param library_catalog: A list of dictionaries representing the library catalog.\n    :return: A list of dictionaries representing the available books in the catalog.\n    \"\"\"","solution":"\n\n    # Initialize an empty list to store the available books\n    available_books = []\n\n    # Iterate over each book in the library catalog\n    for book in library_catalog:\n        # Check if the book is available\n        if book['Available']:\n            # Add the book to the list of available books\n            available_books.append(book)\n\n    return available_books\n\n\n"}
{"problem":"def get_negative_indexed_values(lst, start, end):\n    \"\"\"\n    This exercise is designed for a Physical Therapist to practice using the range function with lists and negative indexing.\n    The function takes in a list, a start index, and an end index and returns a new list containing the values at\n    the specified range indices in reverse order.\n\n    For example:\n    get_negative_indexed_values([1, 2, 3, 4, 5, 6, 7, 8, 9], -3, -8)\n    Output: [5, 4, 3, 2, 1]\n    \"\"\"","solution":"\n\n    # Initialize an empty list to store the selected values\n    result = []\n\n    # Traverse the list using range function from start index to end index\n    for i in range(start, end - 1, -1):\n        # Get the value at the negative index\n        result.append(lst[i])\n\n    return result\n\n\n"}
{"problem":"def intersection_deletion_membership(items1, items2):\n    \"\"\"\n    Takes in two lists and performs the following operations:\n    1. Removes duplicate elements from both lists.\n    2. Deletes common elements found in the intersection of the two lists.\n    3. Returns the modified lists.\n\n    Args:\n    items1 (list): First list of items.\n    items2 (list): Second list of items.\n\n    Returns:\n    tuple: A tuple containing the modified lists.\n    \"\"\"","solution":"\n\n    # Remove duplicates from both lists\n    items1 = list(set(items1))\n    items2 = list(set(items2))\n\n    # Find the common elements in both lists\n    intersection = set(items1).intersection(set(items2))\n\n    # Delete the common elements from both lists\n    items1 = [item for item in items1 if item not in intersection]\n    items2 = [item for item in items2 if item not in intersection]\n\n    return items1, items2\n\n\n"}
{"problem":"def find_common_colors(fabric_designs):\n\n    \"\"\"\n    This function helps a fashion designer find the common colors used in a collection of fabric designs.\n    It takes a list of fabric designs as input and returns the set of common colors.\n    \"\"\"","solution":"\n\n    # Create an empty set to store the common colors\n    common_colors = set()\n\n    # Iterate through each fabric design\n    for fabric_design in fabric_designs:\n\n        # Assume the colors in the first design are common at the beginning\n        if common_colors == set():  # Check if the common_colors set is empty\n            common_colors = set(fabric_design)\n\n        else:\n            # Create a temporary set to store colors common between previous designs and the current design\n            temp_colors = set()\n\n            # Iterate through each color in the previous common colors set\n            for color in common_colors:\n\n                # Check if the color exists in the current fabric design\n                if color in fabric_design:\n                    temp_colors.add(color)  # Add the common color to the temporary set\n\n            common_colors = temp_colors  # Update the common colors set with the temporary set\n\n    return common_colors\n\n# Example usage\nfabrics = [\n    ['red', 'blue', '"}
{"problem":"def nested_while_loops_enum(lst):\n    \"\"\"\n    This exercise aims to test your understanding of using the 'enumerate' function with nested while loops.\n    Complete the function to return a list of tuples containing each value in the input list and its corresponding index.\n    Only use nested while loops and the 'enumerate' function to solve this exercise.\n\n    Args:\n    lst (list): A list of integers.\n\n    Returns:\n    list: A list of tuples, where each tuple contains a value from the input list and its corresponding index.\n\n    Example:\n    >>> nested_while_loops_enum([1, 2, 3])\n    [(1, 0), (2, 1), (3, 2)]\n    \"\"\"","solution":"\n\n    result = []\n    i = 0\n    while i < len(lst):\n        # Start the nested while loop here\n        \n\n            result.append((lst[i], i))\n            \n        \n        i += 1\n    \n    return result\n\n"}
{"problem":"def is_artist(name):\n    \"\"\"This function takes a name as input and checks whether the person is an artist or not.\n    It returns True if the person is an artist, otherwise it returns False.\"\"\"","solution":"\n\n    # Check if the name is a string\n    if not isinstance(name, str):\n        return False\n    \n    # Create a list of known artist names\n    artists = [\"Leonardo da Vinci\", \"Pablo Picasso\", \"Vincent van Gogh\"]\n    \n    # Iterate through the list of artists\n    for artist in artists:\n        \n        # Check if the provided name matches any artist in the list\n        if name == artist:\n            return True\n    \n    # If no match is found, return False\n    return False\n\n"}
{"problem":"def access_nested_elements(nested_list, indices):\n    \"\"\"\n    Given a nested list and a list of indices, this function returns the element \n    at the specified location in the nested list.\n\n    Example:\n    nested_list = [[1, 2, [3, 4]], [5, [6, [7, 8]]]]\n    indices = [1, 1, 1]\n    access_nested_elements(nested_list, indices)\n    \n    Output:\n    8\n    \"\"\"","solution":"\n\n    for idx in indices:\n        nested_list = nested_list[idx]\n    \n    return nested_list\n\n"}
{"problem":"def subtraction_assignment_operator_and_elif_statement(num1, num2, condition):\n    \"\"\"\n    This function demonstrates the usage of subtraction assignment operator and the elif statement.\n\n    Args:\n    num1 -- An integer representing the initial value\n    num2 -- An integer to subtract from the initial value\n    condition -- A boolean value to determine the execution path\n\n    Returns:\n    The result after applying subtraction assignment operator and evaluating the condition\n    \"\"\"","solution":"\n\n    # Subtract num2 from num1 using subtraction assignment operator\n    num1 -= num2\n    \n    if condition:\n        num1 += num2\n        # Continue to perform additional operations\n        \n        if num1 < 0:\n            num1 += num2\n        elif num1 == 0:\n            num1 -= num2\n        elif num1 > 0:\n            num1 = num1 - num2\n        else:\n            num1 = 0\n        \n    else:\n        num1 += num2\n    \n    return num1\n\n# Example usage\nsubtraction_assignment_operator_and_elif_statement(10, 5, False)"}
{"problem":"def nested_try_except_addition():\n    \"\"\"\n    This function performs nested try-except statements and uses the addition assignment operator.\n    The task is to complete the code by filling in the appropriate values and operators to achieve the desired outcome.\n    \"\"\"","solution":"\n\n    try:\n        x = 1\n        y = 2\n        z = 0\n\n        try:\n            # Perform addition assignment operation using x and y\n            # Use addition assignment operator\n\n            # Your code here\n\n            # Uncomment the line below\n            # z = z + x\n\n            print('Value of z after nested addition:', z)\n\n        except Exception as e:\n            print(f\"Error occurred while performing nested addition: {e}\")\n\n    except:\n        print('Error occurred in the outer try block')\n\n    return z\n\n\n"}
{"problem":"def analyze_circuit(voltage, current):\n    \"\"\"\n    Given the voltage and current measurements of an electric circuit, determine \n    the status of different components based on break statements and short-circuiting\n    using if-else statements.\n\n    Args:\n    - voltage: a float representing the voltage measurement\n    - current: a float representing the current measurement\n\n    Returns:\n    - A string indicating the status of different components in the circuit\n    \"\"\"","solution":"\n\n    # Checking the voltage and current to determine component status\n    if voltage < 0 or current < 0:\n        return \"Invalid measurements\"\n\n    if voltage < 10:\n        return \"Power supply failure\"\n\n    if current > 100:\n        return \"Overcurrent detected\"\n\n    # Checking components based on voltage and current limits\n    if voltage < 20 and current < 5:\n        return \"Resistor in circuit\"\n\n    if voltage < 30 and current < 10:\n        return \"Capacitor in circuit\"\n\n    if voltage < 40 and current < 20:\n        return \"Inductor in circuit\"\n\n    # If none of the above conditions are met\n    return \"Unknown component\"\n\n"}
{"problem":"def remove_exit_elements(lawyer_list):\n\n    \"\"\"\n    This exercise requires you to remove specific elements from a list \n    and exit a while loop when a certain condition is met.\n    \n    Given a list of lawyers, you need to remove all the elements that \n    start with the letter 'X' and exit the loop when the list becomes \n    empty or contains only lawyers with a name length greater than 10.\n    \n    Args:\n    - lawyer_list (list): A list of lawyer names\n    \n    Returns:\n    - remaining (list): The remaining lawyers after removing the required elements\n    \n    \"\"\"","solution":"\n\n    index = 0\n    while index < len(lawyer_list):\n        lawyer = lawyer_list[index]\n        \n        ### REMOVE ALL ELEMENTS STARTING WITH LETTER 'X'\n        if lawyer[0] == 'X':\n            lawyer_list.remove(lawyer)\n            continue\n        \n        ### EXIT THE LOOP IF LIST IS EMPTY OR DOES NOT CONTAIN NAMES WITH LENGTH <= 10\n        if len(lawyer_list) == 0 or all(len(l) > 10 for l in lawyer_list):\n            break\n        \n        index += 1\n    \n    remaining = lawyer_list\n    return remaining\n\n\n# Example Usage:\n"}
{"problem":"def find_pattern(lst, pattern):\n    \"\"\"\n\n    Given a list of strings (lst) and a pattern, return the indices of elements in \n    the list that contain the given pattern.\n    \n    Example:\n    lst = ['apple', 'banana', 'grape', 'banana', 'apple']\n    pattern = 'an'\n    output = [1, 3]\n    \n    Args:\n    - lst: a list of strings (length <= 1000)\n    - pattern: a string\n    \n    Returns:\n    - A list of integers representing the indices of elements that contain the pattern.\n    \n    \"\"\"","solution":"\n\n    indexes = []\n\n    # Iterate over each element of the list\n    for index, elem in enumerate(lst):\n        # Check if the pattern is in the element\n        if pattern in elem:\n            indexes.append(index)\n\n    return indexes\n    \n"}
{"problem":"def find_albums(musicians, albums, genre, rating):\n    \"\"\"\n    This function takes in a list of musicians, a list of their albums, a specific genre, and a minimum rating.\n    It then returns a list of albums by musicians in the specified genre with a rating greater than or equal to the given minimum rating.\n    \"\"\"","solution":"\n\n    # Using list comprehension, make a list of all albums in the specified genre\n    genre_albums = [album for musician, album in zip(musicians, albums) if musician.genre == genre]\n\n    # Using another list comprehension, filter the genre_albums list to only include albums with rating greater than or equal to the given minimum rating\n    filtered_albums = [album for album in genre_albums if album.rating >= rating]\n\n    # Return the filtered_albums list\n    return filtered_albums\n\n# Example usage of the function\nmusicians = [\n    Musician(\"John\", \"Jazz\"),\n    Musician(\"Alice\", \"Rock\"),\n    Musician(\"Bob\", \"Jazz\"),\n    Musician(\"Emily\", \"Pop\")\n]\n\nalbums = [\n    Album(\"John\", \"Album 1\", \"Jazz\", 9.5),\n    Album(\""}
{"problem":"def find_case(case_list, target_case):\n    \"\"\"\n    Given a list of case numbers and a target case number, find the index of the target case in the list.\n    If the target case is not found, return -1. You need to use nested loops along with a break statement to solve this exercise.\n\n    Args:\n    case_list (list): A list containing case numbers.\n    target_case (int): The case number to search for.\n\n    Returns:\n    int: The index of the target case if found, -1 otherwise.\n    \"\"\"","solution":"\n    number_of_cases = len(case_list)\n    for i in range(number_of_cases):\n        inner_loop_break = False\n        for j in range(number_of_cases):\n            if case_list[i][j] == target_case:\n                inner_loop_break = True\n                break\n        if inner_loop_break:\n            break\n    else:\n        i = -1\n    return i\n\n"}
{"problem":"def get_truncated_name(full_name: str, num_characters: int) -> str:\n\n    \"\"\"Given a full name of an actor\/actress and the number of characters desired, \n    return the truncated version of the name\"\"\"","solution":"\n\n    truncated_name = ''\n\n    # Determine the length of the full name\n    name_length = len(full_name)\n\n    # Loop through each character in the full name\n    for i in range(name_length):\n        \n        # Check if the character index is within the desired limit\n        if i < num_characters:\n            \n            # Concatenate the character to the truncated name\n            truncated_name += full_name[i]\n\n    return truncated_name"}
{"problem":"def exiting_while_loops_advantages():\n\n    \"\"\"\n    As a psychologist, you have been tasked to create a code completion exercise on the intersection of \"Advantages\" and \n    \"Exiting while loops\". Your goal is to write code that demonstrates the advantages of using the break statement to exit \n    while loops in certain situations.\n    \n    In this exercise, you are given a list of positive integers named 'numbers'. Your task is to write a while loop that iterates \n    through the list and finds the first number that is divisible evenly by 5. Once you find such a number, your loop should be \n    terminated using the break statement.\n    \n    Return the number that satisfies the condition mentioned above.\n    \"\"\"","solution":"\n\n    numbers = [12, 8, 7, 35, 20, 42, 29]\n\n    index = 0\n    while True:\n        if numbers[index] % 5 == 0:\n            break\n        index += 1\n\n    return numbers[index]\n\nprint(exiting_while_loops_advantages())"}
{"problem":"def check_intersection(nums: list[int], target: int) -> bool:\n    \"\"\"\n    This function checks if the target number is present in the intersection of two given lists.\n    The intersection is calculated by multiplying each element of the first list by each element of the second list.\n\n    Args:\n    - nums: A list of integers.\n    - target: An integer.\n\n    Returns:\n    - A boolean value indicating whether the target number is present in the intersection.\n    \"\"\"","solution":"\n\n    intersection = set()\n    for num1 in nums:\n        for num2 in nums:\n            intersection.add(num1 * num2)\n\n    return target in intersection\n\n\n"}
{"problem":"def count_joints_not_treated(total_joints, treated_joints):\n    \"\"\"\n    The Physical Therapist wants to keep track of the number of joints that have not been treated yet.\n    Given a list of all joints and a list of treated joints, write a function that returns the count of joints that have not been treated.\n    \n    Args:\n    - total_joints: A tuple containing the names of all joints.\n    - treated_joints: A tuple containing the names of treated joints.\n    \n    Returns:\n    - The count of joints that have not been treated yet.\n    \n    Example:\n    count_joints_not_treated(('shoulder', 'elbow', 'wrist', 'hip', 'knee', 'ankle'), ('shoulder', 'wrist', 'knee'))\n    Output: 3\n    \"\"\"","solution":"\n    not_treated_joints = 0\n\n    for joint in total_joints:\n        if joint not in treated_joints:\n            not_treated_joints += 1\n\n    return not_treated_joints\n\n"}
{"problem":"def calculate_profit(num_products):\n    \"\"\"\n    This function receives the number of products sold and calculates the total profit.\n    Each product generates a different profit value based on its category.\n    \"\"\"","solution":"\n\n    # Initialize the total profit\n    total_profit = 0\n\n    # Loop over the number of products\n    for i in range(num_products):\n\n        # Call the function to get the product category\n        category = get_product_category(i)\n\n        # Call the function to calculate the profit based on category\n        profit = calculate_product_profit(category)\n\n        # Update the total profit\n        total_profit += profit\n\n    return total_profit\n\n\n"}
{"problem":"def get_product_category(product_id):\n    \"\"\"\n    This function receives the ID of a product and returns its category.\n    \"\"\"","solution":"\n\n    # Code to retrieve the product category based on the ID\n    # ...\n\n    return category\n\n\n"}
{"problem":"def calculate_product_profit(category):\n    \"\"\"\n    This function receives the category of a product and calculates its profit.\n    \"\"\"","solution":"\n\n    # Code to calculate the profit based on the product category\n    # ...\n\n    return profit\n\n\n# Example usage\nprofit = calculate_profit(100)\nprint(\"Total profit:\", profit)\n"}
{"problem":"def check_articles(articles):\n    \"\"\"This function receives a list of articles and returns a new list\n    containing only the articles that meet certain criteria.\"\"\"","solution":"\n    \n    # Initialize the final list\n    filtered_articles = []\n    \n    # Loop through the given articles\n    for article in articles:\n        \n        # Check if the article has all the required information\n        if article[\"title\"] is None or article[\"content\"] is None or article[\"author\"] is None:\n            # Skip to the next article if any required information is missing\n            continue\n        \n        # Check if the article contains specific keywords\n        if \"Python\" not in article[\"content\"] or \"programming\" not in article[\"content\"]:\n            # Skip to the next article if the keywords are not found\n            continue\n        \n        # Check if the article is authored by a journalist with more than 5 years of experience\n        if article[\"author\"][\"years_of_experience\"] <= 5:\n            # Skip to the next article if the author doesn't meet the experience criteria\n            continue\n        \n        # Add the article to the filtered list\n        filtered_articles.append(article)\n    \n    return filtered_articles\n\n"}
{"problem":"def count_all_kinds_of_animals(animal_dict: dict) -> dict:\n\n    \"\"\"You are given a dictionary where the keys represent different types of animals and the values represent the number of each animal in a certain area. Your task is to write a function that counts the total number of animals in the area and returns a dictionary with the count for each type of animal. The animal_dict will always contain at least one key-value pair.\n\n    Args:\n    - animal_dict (dict): A dictionary where keys represent different types of animals and values represent the number of each animal in the area.\n\n    Returns:\n    - dict: A dictionary with the count for each type of animal.\n    \"\"\"","solution":"\n\n    total_count = 0\n    animal_count = {}\n\n    for animal, count in animal_dict.items():\n        total_count += count\n        animal_count[animal] = count\n\n    return animal_count\n\n\nanimal_dictionary = {\"Lions\": 5, \"Tigers\": 2, \"Bears\": 3, \"Wolves\": 4}\nprint(count_all_kinds_of_animals(animal_dictionary))"}
{"problem":"def calculate_resistance(resistors):\n\n    \"\"\"\n    Given a tuple of resistors connected in series, calculate the total resistance.\n\n    Args:\n        resistors (tuple): A tuple of resistors connected in series.\n\n    Returns:\n        float: The total resistance.\n\n    Examples:\n        >>> calculate_resistance((20, 30, 40))\n        90.0\n        >>> calculate_resistance((5, 5, 5, 5))\n        20.0\n        >>> calculate_resistance((100, 200, 300, 400))\n        1000.0\n    \"\"\"","solution":"\n\n    return sum(resistors)\n\nresistors = (10, 20, 30)\n\n# Calculate total resistance using bitwise left shift operator\ntotal_resistance = calculate_resistance(resistors) << 2\n\nprint(total_resistance)\n"}
{"problem":"def slice_greater_than(numbers, n):\n    \"\"\"\n    Given a list of numbers and a threshold value n,\n    return a new list containing all numbers greater than n.\n\n    Example:\n    numbers = [1, 5, 9, 3, 7, 6]\n    n = 4\n\n    Returns:\n    [5, 9, 7, 6]\n    \"\"\"","solution":"\n    # Your code here\n    return [num for num in numbers if num > n]"}
{"problem":"def multiply_lengths(lengths):\n    \"\"\"\n    This exercise is for a carpenter to practice multiplying different lengths using a for loop.\n\n    The carpenter has a list of lengths and needs to calculate the product of all the lengths.\n    Complete the code below to multiply all the lengths together using a for loop.\n\n    Example:\n    lengths = [2, 5, 3]\n    The product of the lengths is 30 (2 * 5 * 3)\n\n    Hint: Initialize a variable to store the product and update it in each iteration of the loop.\n    \"\"\"","solution":"\n\n    product = 1  # Initialize the product to 1\n\n    # Multiply each length together using a for loop\n    for length in lengths:\n        product *= length\n\n    return product\n\n"}
{"problem":"def replace_elements(lst):\n    \"\"\"\n    Given a list of integers, replace all negative numbers with the string 'NEGATIVE' and\n    all positive numbers with the string 'POSITIVE', using the ternary operator.\n    Remove the numbers 0, 1, and 2 from the list and return the updated list.\n\n    Args:\n    lst (list): A list of integers\n\n    Returns:\n    list: Updated list with negative numbers replaced by 'NEGATIVE', positive numbers replaced by 'POSITIVE',\n          and 0, 1, 2 removed from the list.\n\n    Raises:\n    ValueError: If the input is not a list.\n    \"\"\"","solution":"\n\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list.\")\n\n    # Using ternary operator to replace negative numbers with 'NEGATIVE' and positive numbers with 'POSITIVE'\n    updated_lst = ['NEGATIVE' if num < 0 else 'POSITIVE' for num in lst]\n\n    # Removing 0, 1, 2 from the list\n    updated_lst = [num for num in updated_lst if num not in [0, 1, 2]]\n\n    return updated_lst\n\n"}
{"problem":"def count_matching_chars(string1, string2):\n    \"\"\"\n    The function counts the number of matching characters at the same position in two input strings.\n\n    Args:\n    string1 (str): The first input string\n    string2 (str): The second input string\n\n    Returns:\n    int: The number of matching characters\n\n    Example:\n    count_matching_chars('environment', 'scandal') => 0\n    count_matching_chars('tree', 'free') => 3\n    \"\"\"","solution":"\n\n    count = 0\n\n    # Iterate over the range of the minimum length between the two strings\n    for i in range(min(len(string1), len(string2))):\n        # Check if the characters at position i are equal\n        if string1[i] == string2[i]:\n            count += 1\n\n    return count\n"}
{"problem":"def check_player_score(score_1, score_2, score_3):\n\n    \"\"\"A game developer wants to determine the final score of a player based on three scores obtained in different levels of the game.\n    Each score ranges from 0 to 100. The final score is calculated as the sum of the three scores multiplied by a factor of 2 if all scores are greater than or equal to 80, \n    otherwise multiplied by a factor of 1. Determine the final score of the player.\n    \n    Arguments:\n    score_1 -- the first score (integer) obtained by the player\n    score_2 -- the second score (integer) obtained by the player\n    score_3 -- the third score (integer) obtained by the player\n    \n    Returns:\n    The final score of the player (integer)\n    \"\"\"","solution":"\n\n    # Use ternary operator to calculate the final score based on the conditions\n    final_score = (score_1 + score_2 + score_3) * (2 if score_1 >= 80 and score_2 >= 80 and score_3 >= 80 else 1)\n\n    return final_score"}
{"problem":"def find_common_exercises(patient1, patient2, patient3):\n    \"\"\"\n    This function takes three sets of exercises completed by three different patients, and returns a list of exercises\n    that are common to all three patients.\n    \n    Args:\n    - patient1: a set of exercises completed by patient 1\n    - patient2: a set of exercises completed by patient 2\n    - patient3: a set of exercises completed by patient 3\n    \n    Returns:\n    - common_exercises: a list of exercises common to all three patients\n    \"\"\"","solution":"\n    # Initialize an empty list to store common exercises\n    common_exercises = []\n    \n    # Iterate through each exercise in patient1's set of exercises\n    for exercise in patient1:\n        \n        # Check if the exercise is also present in both patient2 and patient3's set of exercises\n        if exercise in patient2 and exercise in patient3:\n            \n            # If the exercise is common to all three patients, append it to the common_exercises list\n            common_exercises.append(exercise)\n    \n    # Return the list of common exercises\n    return common_exercises\n\n# Example usage\npatient1_exercises = {'exercise1', 'exercise"}
{"problem":"def make_restaurant_order(menu):\n\n    \"\"\"Chef can make an order in a restaurant by inputting the menu\"\"\"","solution":"\n\n    soup = menu[\"soup\"]\n    main_course = menu[\"main_course\"]\n\n    for i in range(len(soup)):\n        for j in range(len(main_course)):\n            dish = soup[i] + \" with \" + main_course[j]\n\n            if \"salad\" in dish:\n                dish += \" and salad\"\n\n            print(\"Chef is preparing:\", dish)\n\n    return \"Chef's order is ready!\"\n\n\nmenu = {\n    \"soup\": [\"tomato\", \"chicken noodle\", \"mushroom\"],\n    \"main_course\": [\"steak\", \"chicken\", \"fish\"]\n}\n\n# Chef is preparing: tomato with steak\n# Chef is preparing: tomato with chicken\n# Chef is preparing: tomato with fish\n# Chef is preparing: tomato with steak and salad\n# Chef is preparing: tomato with chicken and salad\n# Chef is preparing: tomato with fish and salad\n# Chef is preparing: chicken noodle with steak\n# Chef is preparing: chicken noodle with chicken\n# Chef is preparing: chicken noodle with fish\n# Chef is preparing: chicken noodle with steak and"}
{"problem":"def get_actor_or_actress_name(gender, age, profession):\n    \"\"\"Given the gender, age, and profession of an individual,\n    this function returns the name of a famous actor or actress\n    based on the provided information using nested ternary operators.\n\n    Args:\n    gender (str): The gender of the individual can be 'M' for male\n                  or 'F' for female.\n    age (int): The age of the individual in years.\n    profession (str): The profession of the individual can be 'A'\n                      for actor or 'C' for actress.\n\n    Returns:\n    str: The name of a famous actor or actress based on the input.\n\n    Note:\n    Although nested ternary operators can be shorter and more compact,\n    using them excessively without proper logic and formatting can make\n    the code difficult to read and maintain.\n    \"\"\"","solution":"\n\n    return (\n        \"Johnny Depp\" if gender == 'M' else\n        \"Meryl Streep\" if gender == 'F' and profession == 'A' and age >= 40 else\n        \"Scarlett Johansson\" if gender == 'F' and profession == 'A' and age < 40 else\n        \"Leon"}
{"problem":"def calculate_carpenter_salary(hours_worked, hourly_rate):\n    \"\"\"\n    Calculates the salary of a carpenter with bonus based on hours worked and hourly rate.\n    \n    Args:\n    hours_worked -- the number of hours worked\n    hourly_rate -- the rate per hour\n    \n    Returns:\n    The total salary of the carpenter, including bonus\n    \"\"\"","solution":"\n\n    total_salary = hours_worked * hourly_rate\n    if hours_worked > 40:\n        bonus = (hours_worked - 40) * 0.5 * hourly_rate  # Calculate the bonus for extra working hours\n        total_salary += bonus\n\n    return total_salary"}
{"problem":"def calculate_cuts(lengths, pieces, stock_length):\n\n    \"\"\"\n    Given a list of lengths to cut, the number of pieces needed, and the length of \n    the available stock, calculate the number of stock pieces required and determine \n    if the cutting process is feasible by using break and continue statements.\n\n    Args:\n    lengths (list): A list of integer values representing the lengths to cut.\n    pieces (int): An integer representing the number of pieces needed.\n    stock_length (int): An integer representing the length of the available stock.\n\n    Returns:\n    int: The minimum number of stock pieces required, or -1 if the cutting process is not feasible.\n    \"\"\"","solution":"\n\n    total_length = sum(lengths)\n    if total_length > (stock_length * pieces):\n        return -1\n\n    stock_pieces = 0\n    remaining_stock = stock_length\n    \n    for length in lengths:\n        if remaining_stock < length:\n            stock_pieces += 1\n            remaining_stock = stock_length\n\n        if stock_pieces >= pieces:\n            break\n\n        if remaining_stock >= length:\n            remaining_stock -= length\n            continue\n        \n        while remaining_stock < length:\n            remaining_stock += lengths.pop(0)\n           "}
{"problem":"def check_animal_characteristics(animal):\n\n    \"\"\"A zoologist wants to check the characteristics of various animals. \n    The function takes the name of the animal as input and checks if the animal is a mammal, \n    if it is a carnivore, and if it can swim. It then returns a message describing the characteristics of the animal.\"\"\"","solution":"\n\n    is_mammal = False\n    is_carnivore = False\n    can_swim = False\n\n    # TODO: Implement the code to check the animal characteristics using the \"AND\" operator\n\n    if animal == \"lion\":\n        is_mammal = True\n        is_carnivore = True\n\n    if animal == \"whale\":\n        is_mammal = True\n        can_swim = True\n\n    if animal == \"shark\":\n        can_swim = True\n        is_carnivore = True\n\n    if animal == \"elephant\":\n        is_mammal = True\n\n    if is_mammal and is_carnivore and can_swim:\n        return f\"The {animal} is a mammal, carnivore, and can swim.\"\n    elif is_mammal and is_carnivore"}
{"problem":"def remove_elements(fashion_styles, remove_styles):\n    \"\"\"\n    Given a list of fashion styles and a list of styles to remove, \n    remove the elements from the fashion_styles list that appear in the remove_styles list.\n    \n    Args:\n    fashion_styles (list): A list of fashion styles.\n    remove_styles (list): A list of styles to be removed.\n    \n    Returns:\n    list: A new list containing the fashion styles after removing the specified styles.\n    \n    Example:\n    remove_elements([\"Casual\", \"Formal\", \"Trendy\", \"Vintage\"], [\"Formal\", \"Trendy\"])\n    Output: [\"Casual\", \"Vintage\"]\n    \"\"\"","solution":"\n    removed_list = fashion_styles[:]  # Create a copy of the original list\n    \n    for style in remove_styles:\n        if style in removed_list:\n            removed_list.remove(style)  # Remove the style from the copied list\n        \n    return removed_list\n\n\n"}
{"problem":"def calculate_distance(vector):\n    \"\"\"\n    Given a complex vector, the function calculates the distance between the origin and the point.\n    The distance is the absolute value of the complex number.\n    Use a while loop to repeatedly ask the user for a vector until they enter 'done'.\n\n    Args:\n    vector (complex): The complex vector for which the distance needs to be calculated.\n\n    Returns:\n    float: The distance between the origin and the given vector.\n\n    Example:\n    calculate_distance(complex(3, 4)) => 5.0\n    calculate_distance(complex(-2, -3)) => 3.605551275463989\n    \"\"\"","solution":"\n\n    distance = abs(vector)  # Calculate the initial distance\n    while True:\n        try:\n            vector = eval(input(\"Enter a complex vector (in the format 'a+bj') or 'done' to finish: \"))\n            if vector == 'done':\n                break\n\n            distance = abs(vector)  # Calculate the distance for the new vector\n\n        except (NameError, SyntaxError):\n            print(\"Invalid input, try again.\")\n\n    return distance\n\n"}
{"problem":"def paintings_sold(paintings):\n    \"\"\"\n    You are an artist who sells paintings. Given a list of paintings, determine how many paintings you have sold.\n    \n    Each element in the 'paintings' list is a string representing the status of a painting. The status can be 'sold' or 'unsold'.\n    Your task is to count the number of paintings that have been sold.\n    \n    Return the total number of paintings sold.\n    \n    Example:\n    paintings_sold(['sold', 'unsold', 'sold', 'sold', 'unsold']) -> 3\n    \n    Note:\n    If a painting is sold, you should count it even if there are unsold paintings after it.\n    \"\"\"","solution":"\n    \n    paintings_sold = 0\n    for status in paintings:\n        if status == 'sold':\n            paintings_sold += 1\n            \n    return paintings_sold\n\nprint(paintings_sold(['sold', 'unsold', 'sold', 'sold', 'unsold']))"}
{"problem":"def find_common_elements(list1, list2):\n\n    \"\"\"\n    This function takes in two lists and returns the common elements between them.\n    \"\"\"","solution":"\n\n    # Convert the lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(common_elements)\n\n\n"}
{"problem":"def slice_list(list_to_slice, start_index, end_index):\n\n    \"\"\"\n    This function takes in a list and two indices (start and end) and returns a sliced portion of the list.\n    \"\"\"","solution":"\n\n    # Check if the start and end indices are within the range of the list\n    if start_index < 0 or end_index > len(list_to_slice):\n        return \"Invalid indices\"\n\n    # Perform slicing and return the sliced portion\n    sliced_list = list_to_slice[start_index:end_index]\n    return sliced_list\n\n\n# Archaeologist Exercise:\n\n# Given the following lists:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\n# Find the common elements"}
{"problem":"def append_numbers_not_equal(list1, list2):\n    \"\"\"\n    This function appends all the numbers from list2 to list1, excluding the numbers that are already in list1.\n\n    Args:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: The updated list1 after appending the numbers from list2.\n\n    Example:\n    list1 = [1, 2, 3]\n    list2 = [3, 4, 5, 6]\n    append_numbers_not_equal(list1, list2) # returns [1, 2, 3, 4, 5, 6]\n    \"\"\"","solution":"\n    for num in list2:\n        if num not in list1:\n            list1.append(num)\n    return list1"}
{"problem":"def calculate_cut_lengths(board_length, num_cuts):\n\n    \"\"\"\n    As a carpenter, you need to make a number of equal-width cuts on a board of given length.\n    The goal of this exercise is to calculate the lengths of each cut required.\n\n    Args:\n    - board_length: The total length of the board (in inches), a positive integer.\n    - num_cuts: The number of cuts to be made, a positive integer.\n\n    Returns:\n    - A list containing the lengths of each cut required, in inches.\n    \"\"\"","solution":"\n\n    # Calculate the total width of the cuts required\n    total_width = board_length << num_cuts\n\n    # Calculate the width of each individual cut\n    cut_width = total_width \/\/ (2 ** num_cuts)\n\n    # Create a list to store the cut lengths\n    cut_lengths = []\n\n    # Use the range function to determine the start and end points of each cut\n    for i in range(num_cuts + 1):\n        start = i * cut_width\n        end = (i + 1) * cut_width\n        cut_lengths.append(end - start)\n\n    return cut_lengths\n\n\nboard_length = 60  # inches\nnum_cuts ="}
{"problem":"def intersection_of_tuples(tup1, tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing the common elements between them.\n    \"\"\"","solution":"\n    \n    # Finding the intersection of the two tuples\n    intersection = tuple(set(tup1).intersection(tup2))\n    \n    return intersection\n\n"}
{"problem":"def create_slice(data, start, stop, step):\n    \"\"\"\n    docstring explaining the exercise\n\n    :param data: list of data elements\n    :param start: starting index for the slice\n    :param stop: ending index for the slice\n    :param step: step size for the slice\n    :return: sliced list of elements\n\n    Example:\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    start = 1\n    stop = 9\n    step = 2\n    create_slice(data, start, stop, step) => [2, 4, 6, 8]\n    \"\"\"","solution":"\n\n    # Return the specified slice of the given data list using slicing\n    return data[start:stop:step]\n\n\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstart = 0\nstop = 10\nstep = 1\n# Complete the code to obtain a new list containing every other element of data starting from index 0.\nsliced_list ="}
{"problem":"def filter_photos(photos):\n\n    \"\"\"\n    Given a list of photos, the function filters the photos based on the following criteria:\n    - If the photo has a resolution higher than 10 megapixels and the photographer has more than \n      5 years of experience, the photo is accepted.\n    - If the photo has a resolution higher than 8 megapixels and the photographer has more than \n      3 years of experience, the photo is accepted.\n    - If the photo has a resolution higher than 5 megapixels and the photographer has more than \n      1 year of experience, the photo is accepted.\n    - Otherwise, the photo is rejected.\n\n    Args:\n    photos (list): A list of dictionaries containing the photo information.\n    \n    Returns:\n    list: A list of photos that fulfill the acceptance criteria.\n    \"\"\"","solution":"\n  \n    accepted_photos = [photo for photo in photos if (photo['resolution'] > 10 and photo['experience'] > 5) \n                                                or (photo['resolution'] > 8 and photo['experience'] > 3) \n                                                or (photo['resolution'] > 5 and photo['experience'] > 1)]\n    return accepted_photos"}
{"problem":"def intersection_of_sets(slicing_set: set, another_set: set) -> set:\n    \"\"\"Given two sets, this function returns the intersection of the two sets by slicing the first set.\n\n    Args:\n        slicing_set (set): The set to be sliced in order to find the intersection.\n        another_set (set): The set to compare against.\n\n    Returns:\n        set: The intersection of the two sets.\n\n    Example:\n        >>> intersection_of_sets({1, 2, 3, 4, 5}, {4, 5, 6, 7})\n        {4, 5}\n    \"\"\"","solution":"\n    # Obtain a list of all elements in the first set\n    elements = list(slicing_set)\n    \n    # Iterate over each element in the list\n    for element in elements:\n        try:\n            # Remove the element from the set if it is not present in the other set\n            slicing_set.remove(element) if element not in another_set else None\n        except KeyError:\n            pass\n    \n    return slicing_set\n\n"}
{"problem":"def calculate_total_division_assignment(absolute_value):\n    \"\"\"\n    This exercise aims to calculate the division assignment operator value after applying the absolute value function.\n    \n    Given an absolute_value, implement the necessary code to calculate the total value using the division assignment operator (\/=).\n    \n    Args:\n    absolute_value (float): The number to apply the absolute value function.\n    \n    Returns:\n    float: The total value after performing the division assignment operation.\n    \"\"\"","solution":"\n    \n    # Calculate the absolute value\n    absolute_value = abs(absolute_value)\n\n    # Set the initial value of total\n    total = 100.0\n    \n    # Complete the code to calculate the division assignment operator value\n\n    \n    \n    \n    \n    \n    \n    \n    # Return the final calculated value\n    return total\n\n"}
{"problem":"def find_matching_outfits(colors, patterns):\n    \n    \"\"\"As a fashion designer, you want to create matching outfits based on given colors and patterns.\n    The function takes in two lists: colors and patterns, where each list contains the respective attributes \n    of different clothing items. Your task is to find all pairs of clothing items that have both matching \n    colors and patterns, and return them as a list of tuples.\n    \n    Args:\n    - colors: A list of strings representing the colors of clothing items\n    - patterns: A list of strings representing the patterns of clothing items\n    \n    Returns:\n    - A list of tuples, where each tuple consists of two clothing items that have both matching colors and patterns.\n    \"\"\"","solution":"\n    \n    matching_outfits = []\n    i = 0\n    \n    while i < len(colors):\n        j = 0\n        \n        while j < len(patterns):\n            if colors[i] == patterns[j]:\n                matching_outfits.append((colors[i], patterns[j]))\n                break\n            j += 1\n            \n        i += 1\n    \n    return matching_outfits"}
{"problem":"def count_common_elements(t1, t2):\n    \"\"\"\n    This function takes in two tuples and returns the count of common elements between them.\n\n    Args:\n    t1, t2 -- two tuples of elements\n\n    Returns:\n    count -- the count of common elements\n\n    Examples:\n    1. count_common_elements((1, 2, 3), (2, 3, 4)) => 2\n    2. count_common_elements(('A', 'B', 'C'), ('C', 'D', 'E')) => 1\n    \"\"\"","solution":"\n\n    common_count = 0\n\n    # Iterate over each element in the first tuple\n    for element in t1:\n        # Check if the element exists in the second tuple\n        if element in t2:\n            common_count += 1\n\n    return common_count\n\n\n"}
{"problem":"def remove_elements(lst, num):\n    \"\"\"\n    This exercise will test your knowledge of removing elements from a list using the 'break' statement.\n    \n    You are given a list 'lst' containing integers and a target number 'num'. Your task is to remove all \n    occurrences of the target number from the list using a 'break' statement.\n    \n    Your function should return the modified list with the target number removed.\n    \n    Example:\n    remove_elements([1, 2, 3, 4, 1, 5, 6, 1], 1) -> [2, 3, 4, 5, 6]\n    remove_elements([1, 1, 1, 1, 1], 1) -> []\n    \n    Remember:\n    - The 'break' statement is used to exit a loop prematurely.\n    - You can use the 'remove()' method to remove an element from the list.\n    \n    Good luck!\n    \"\"\"","solution":"\n    for i in lst:\n        if i == num:\n            lst.remove(i)\n            break  # Add the 'break' statement here to exit the loop after removing the first occurrence of num\n    return lst"}
{"problem":"def find_common_elements(list1, list2):\n    \"\"\"\n    Given two lists, find the common elements between them and return them as a new list.\n\n    Args:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A list containing the common elements.\n\n    Exercise:\n    Your task is to complete the code by implementing the loop and break statement to\n    find the common elements between list1 and list2 and return them as a new list.\n    \"\"\"","solution":"\n\n    common_elements = []\n    \n    # Loop through list1\n    for element in list1:\n        # Loop through list2\n        for compare in list2:\n            # Compare elements\n            if element == compare:\n                # Append common element to the result list\n                common_elements.append(element)\n                break  # Add a break statement here (1 line)\n    \n    return common_elements\n\n"}
{"problem":"def find_common_friends(athlete1, athlete2, all_athletes):\n\n    \"\"\"This function takes in two athlete names, a set of all athletes, and finds their common friends.\"\"\"","solution":"\n\n    # initialize an empty set to store the common friends\n    common_friends = set()\n\n    # iterate over the set of all athletes\n    for athlete in all_athletes:\n        # skip the current iteration if the athlete is either the first or second athlete\n        if athlete == athlete1 or athlete == athlete2:\n            continue\n        \n        # create a set of friends for each athlete\n        athlete_friends = set(get_friends(athlete))\n\n        # if both athletes have a common friend, add it to the common_friends set\n        if athlete1 in athlete_friends and athlete2 in athlete_friends:\n            common_friends.add(athlete)\n        \n    return common_friends\n\n\n"}
{"problem":"def categorize_animals(animal):\n    \"\"\"\n    This function categorizes animals based on their characteristics. \n    It takes an 'animal' parameter which represents the name of the animal as a string. \n    The function should return a string indicating the category of the animal.\n    \n    Categories:\n    - 'mammal': if the animal gives birth to live young, has mammary glands, and has hair or fur.\n    - 'reptile': if the animal is cold-blooded, has dry scales, and lays eggs.\n    - 'bird': if the animal has feathers, a beak, and lays hard-shelled eggs.\n    - 'fish': if the animal lives in water, has gills for breathing, and has fins and scales.\n    \n    Note: The function should be case-insensitive, meaning it should treat \"mammal\", \"MAMMAL\", \"MaMmAl\", etc. as valid inputs.\n    \"\"\"","solution":"\n\n    if animal.lower() == 'mammal':\n        return \"This is a mammal\"\n    elif animal.lower() == 'reptile':\n        return \"This"}
{"problem":"def modify_elements(elements: list) -> list:\n    \"\"\"\n    This exercise focuses on modifying elements using list comprehensions and short-circuiting with if-else statement.\n    The function takes a list of integers as input and returns a modified list with the following modifications:\n    - If the element is even and greater than 10, it should be squared.\n    - If the element is odd and less than 10, it should be cubed.\n    - If the element is odd and between 10 and 20 (inclusive), it should be multiplied by 5.\n    - If the element is even and less than or equal to 20, it should be halved.\n\n    Args:\n    - elements: A list of integers.\n    \n    Returns:\n    - A modified list of integers.\n    \"\"\"","solution":"\n\n    return [(x ** 2 if x % 2 == 0 and x > 10 else x ** 3 if x % 2 != 0 and x < 10 else x * 5 if 10 <= x <= 20 else x \/ 2) for x in elements]\n\n\n"}
{"problem":"def code_completion_exercise():\n    \"\"\"\n    What will be the output of the following code snippet?\n    \"\"\"","solution":"\n\n    a = 10\n    b = 5\n    c = 2\n    \n    result = (a << b) if (c < b) else (a >> b)\n    \n    print(result)\n\n\ncode_completion_exercise()"}
{"problem":"def create_2d_grid(width: int, height: int) -> tuple:\n\n    \"\"\"Create a 2D grid for a game developer.\n\n    This function takes in the width and height for the 2D grid,\n    and returns a tuple containing a list of lists representing the grid.\n\n    Args:\n    width (int): The desired width of the 2D grid.\n    height (int): The desired height of the 2D grid.\n\n    Returns:\n    tuple: A tuple containing a list of lists representing the grid.\n    \"\"\"","solution":"\n\n    # Create an empty grid with the specified width and height\n    grid = [[None for _ in range(width)] for _ in range(height)]\n\n    return grid\n    \n\n"}
{"problem":"def calculate_profit(target_profit):\n    \"\"\"\n    A marketing manager needs to calculate the number of units of a product to sell in order to achieve a target profit.\n    The cost per unit is $25 and the selling price per unit is $40. The manager wants to use a while loop to iterate over\n    the number of units until the calculated profit is greater than or equal to the target profit.\n\n    Args:\n        target_profit (float): The desired profit in dollars.\n\n    Returns:\n        int: The number of units to sell in order to achieve the target profit.\n\n    Raises:\n        ValueError: If the target_profit is negative.\n\n    Note:\n        The required formula to calculate the profit is: profit = (selling_price - cost_per_unit) * num_units\n        where selling_price = $40 and cost_per_unit = $25.\n    \"\"\"","solution":"\n\n    if target_profit < 0:\n        raise ValueError(\"Target profit must be a positive value.\")\n\n    num_units = 0\n    profit = 0\n\n    while profit < target_profit:\n        num_units += 1\n        profit = (40 - 25) * num_units\n\n    return num_units\n\n"}
{"problem":"def concatenate_tuples(t1: tuple, t2: tuple) -> tuple:\n\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple\n    by concatenating the elements of the input tuples.\n\n    Args:\n    t1 (tuple): First tuple\n    t2 (tuple): Second tuple\n\n    Returns:\n    tuple: Concatenated tuple\n\n    \"\"\"","solution":"\n\n    # Concatenate the tuples and return the result\n    return t1 + t2\n\n\n"}
{"problem":"def repeat_dictionary_values(dictionary: dict, num_repetitions: int) -> dict:\n\n    \"\"\"\n    This function takes a dictionary and the number of repetitions as input,\n    and returns a new dictionary where the values are repeated the specified\n    number of times.\n\n    Args:\n    dictionary (dict): Input dictionary\n    num_repetitions (int): Number of times the values need to be repeated\n\n    Returns:\n    dict: Dictionary with repeated values\n\n    \"\"\"","solution":"\n\n    repeated_dict = {}\n\n    # Repeat the values in the dictionary the specified number of times\n    for key, value in dictionary.items():\n        repeated_dict[key] = [value] * num_repetitions\n\n    return repeated_dict\n\n\n"}
{"problem":"def are_points_in_rectangle(rectangle, points):\n    \"\"\"\n    This function checks whether the given points lie inside the rectangle or not.\n\n    Params:\n    - rectangle: a tuple containing coordinates of the rectangle's corners in the format (x1, y1, x2, y2)\n                where (x1, y1) represents the bottom-left corner and (x2, y2) represents the top-right corner.\n    - points: a list of tuples representing the coordinates of the points to be checked in the format [(x1, y1), (x2, y2), ...]\n\n    Returns:\n    - A list of boolean values indicating whether each point lies inside the rectangle or not.\n    \"\"\"","solution":"\n\n    result = []\n    for point in points:\n        x, y = point\n        x1, y1, x2, y2 = rectangle\n        is_inside = (x1 <= x <= x2) and (y1 <= y <= y2)\n        result.append(is_inside)\n\n    return result\n\n\n"}
{"problem":"def add_coordinates(coord_set: set, latitude: float, longitude: float) -> set:\n\n    \"\"\"This function adds the given latitude and longitude coordinates to the given set of coordinates.\n\n    The latitude value should be between -90 and 90, while the longitude value should be between -180 and 180.\n\n    Args:\n    - coord_set: A set of coordinates.\n    - latitude: A float representing the latitude of a location.\n    - longitude: A float representing the longitude of a location.\n\n    Returns:\n    - A new set of coordinates, including the newly added coordinates.\n\n    \"\"\"","solution":"\n\n    # Check if the coordinates are valid\n    if not (-90 <= latitude <= 90) or not (-180 <= longitude <= 180):\n        raise ValueError(\"Invalid latitude or longitude values!\")\n\n    # Add the coordinates to the set\n    coord_set.add((latitude, longitude))\n\n    # Return the updated set of coordinates\n    return coord_set\n\n"}
{"problem":"def check_crops(farmer, crops):\n\n    \"\"\"A farmer wants to check the status of his crops and remove the ones that are fully grown.\n    Complete the code below to help the farmer identify the crops that need to be removed.\n    The function should return a list of crops that are ready to be harvested.\"\"\"","solution":"\n\n    # Initialize an empty list to store the crops that are ready\n    fully_grown_crops = []\n\n    # Iterate through all the crops in the given list\n    index = 0\n    while index < len(crops):\n\n        # Get the current crop from the list\n        current_crop = crops[index]\n\n        # Check if the current crop has fully grown\n        if current_crop['growth_status'] == 'Fully Grown':\n\n            # Remove the fully grown crop from the list and add it to the fully_grown_crops list\n            fully_grown_crops.append(crops.pop(index))\n\n        else:\n            # Move to the next crop\n            index += 1\n\n    # Return the list of crops that are ready for harvesting\n    return fully_grown_crops\n\n\n"}
{"problem":"def create_dancer_set(dancers):\n    \"\"\"\n    This function takes a list of dancers and returns a set containing their names.\n\n    Args:\n    - dancers (list): A list of dancers' names.\n\n    Returns:\n    - dancer_set (set): A set containing the names of the dancers.\n\n    Example:\n    create_dancer_set(['Alice', 'Bob', 'Charlie']) -> {'Alice', 'Bob', 'Charlie'}\n    \"\"\"","solution":"\n    dancer_set = set(dancers)\n    return dancer_set\n\n\n"}
{"problem":"def sort_rocket_parts(rocket_parts, missing_parts):\n\n    \"\"\"\n    Given a list of rocket parts 'rocket_parts' and a list of missing parts 'missing_parts',\n    write a function that returns a list of rocket parts that are present in both 'rocket_parts'\n    and 'missing_parts'. The returned list should be sorted in alphabetical order.\n\n    Parameters:\n    rocket_parts (list): A list of rocket parts (strings).\n    missing_parts (list): A list of missing parts (strings).\n\n    Returns:\n    list: A sorted list of rocket parts that are present in both 'rocket_parts' and 'missing_parts'.\n\n    Example:\n    If rocket_parts = ['engine', 'booster', 'fins', 'nose cone'] and missing_parts = ['booster', 'fins', 'parachute'],\n    the function should return ['booster', 'fins'].\n    \"\"\"","solution":"\n\n    common_parts = []\n    for part in rocket_parts:\n        if part in missing_parts:\n            common_parts.append(part)\n    \n    sorted_common_parts = sorted(common_parts)\n    return sorted_common_parts\n\n"}
{"problem":"def find_common_numbers(range_start: int, range_end: int, num_list: List[int]) -> List[int]:\n    \"\"\"\n    This function finds the common numbers between a given range and a list of integers.\n\n    Args:\n    range_start (int): The starting value of the range.\n    range_end (int): The ending value of the range.\n    num_list (List[int]): The list of integers.\n\n    Returns:\n    List[int]: A list containing the common numbers between the range and the list.\n\n    Examples:\n    >>> find_common_numbers(1, 10, [5, 10, 15, 20])\n    [5, 10]\n    >>> find_common_numbers(10, 20, [5, 10, 15, 20])\n    [10, 15, 20]\n    \"\"\"","solution":"\n\n    common_numbers = []\n    \n    # Iterate through the given range\n    for num in range(range_start, range_end + 1):\n        # Check if the current number is present in the list\n        if num in num_list:\n            common_numbers.append(num)\n    \n    return common_numbers\n\n"}
{"problem":"def polar_to_cartesian(magnitude, angle):\n\n    \"\"\"\n    Given the magnitude and angle, converts a complex number from polar representation to cartesian representation.\n    \n    Args:\n    magnitude (float): The magnitude of the complex number.\n    angle (float): The angle (in radians) of the complex number.\n    \n    Returns:\n    complex: The complex number in cartesian representation.\n    \"\"\"","solution":"\n    \n    real = magnitude * cos(angle)\n    imag = magnitude * sin(angle)\n    return complex(real, imag)\n\n"}
{"problem":"def cartesian_to_polar(complex_number):\n\n    \"\"\"\n    Given a complex number in cartesian representation, converts it to polar representation.\n    \n    Args:\n    complex_number (complex): The complex number in cartesian representation.\n    \n    Returns:\n    tuple: A tuple containing the magnitude and angle (in radians) of the complex number.\n    \"\"\"","solution":"\n    \n    magnitude = abs(complex_number)\n    angle = cmath.phase(complex_number)\n    return magnitude, angle\n\n"}
{"problem":"def create_firefighter_list(n):\n\n    \"\"\"Create a list of firefighter names\"\"\"","solution":"\n\n    firefighters = []\n\n    # Loop through n times to get firefighter names\n    for _ in range(n):\n        name = input(\"Enter firefighter name: \")\n        firefighters.append(name)\n    \n    return firefighters\n\n\n"}
{"problem":"def check_firefighter_names(firefighters):\n\n    \"\"\"Loop through the list of firefighter names\n    and check if any name starts with the letter 'A'\"\"\"","solution":"\n\n    # Initialize a variable to keep track of the count\n    count = 0\n\n    # Loop through the list\n    for firefighter in firefighters:\n        if firefighter.startswith('A'):\n            count += 1\n    \n    return count\n\n\n# Create a list of 5 firefighter names\nfirefighters = create_firefighter_list(5)\n\n# Check the number of firefighter names starting with 'A'\ncount_with_a = check_firefighter_names(firefighters)\n\nprint(f\"Number of firefighter names starting with 'A': {count_with_a}\")\n"}
{"problem":"def remove_duplicates(lst):\n    \"\"\"Given a list of elements, remove all elements that are not in the not_in_list\"\"\"","solution":"\n\n    not_in_list = [1, 3, 5, 7, 9]  # This is the list of elements that should not be in the final list\n    new_lst = []  # Initialize an empty list to store the final result\n\n    for element in lst:\n        if element not in not_in_list:  # Check if the element is not in the not_in_list\n            new_lst.append(element)  # If it is not in the list, add it to the new_lst\n\n    return new_lst\n\n"}
