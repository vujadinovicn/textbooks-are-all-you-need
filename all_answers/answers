{"task_id": "HumanEval_kotlin/32", "completion": "    val result = mutableListOf<Int>()\n    for (i in l.indices) {\n        if (i % 3 != 0) {\n            result.add(l[i])\n        }\n    }\n    result.sort()\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/74", "completion": "    return a > 0 && Math.pow(a, 1.0 / 3.0) % 1 == 0\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/160", "completion": "    var list = mutableListOf<Int>()\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            list.add(i)\n        }\n    }\n    return list.sorted()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/88", "completion": "    var count = 0\n    val words = s.split(\" \")\n    for (word in words) {\n        if (word.startsWith(\"I\")) {\n            count++\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/89", "completion": "    return (x is Int && y is Int && z is Int) && (x + y == z || x + z == y || y + z == x)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/119", "completion": "    var sum = 0\n    var i = 0\n    while (i < k) {\n        sum += arr[i]\n        i++\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/3", "completion": "    var balance = 0\n    for (operation in operations) {\n        balance += operation\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/84", "completion": "    val result = mutableListOf<List<Int>>()\n    for (i in lst.indices) {\n        for (j in lst[i].indices) {\n            if (lst[i][j] == x) {\n                result.add(listOf(i, j))\n            }\n        }\n    }\n    return result.sortedBy { it[0] }.sortedByDescending { it[1] }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/17", "completion": "    val notes = musicString.split(\" \")\n    val result = mutableListOf<Any>()\n    for (note in notes) {\n        when (note) {\n            \"o\" -> result.add(4)\n            \"o|\" -> result.add(2)\n            \".|\" -> result.add(1)\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/57", "completion": "    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/87", "completion": "    if (lst.isEmpty()) return null\n    if (lst.size == 1) return null\n    var min1 = lst[0]\n    var min2 = lst[1]\n    for (i in 0 until lst.size) {\n        if (lst[i] < min1) {\n            min2 = min1\n            min1 = lst[i]\n        } else if (lst[i] < min2) {\n            min2 = lst[i]\n        }\n    }\n    return min2\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/34", "completion": "    var max = l[0]\n    for (i in l) {\n        if (i > max) {\n            max = i\n        }\n    }\n    return max\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/21", "completion": "    val min = numbers.min()\n    val max = numbers.max()\n    val rescaled = numbers.map { it - min }.map { it / (max - min) }\n    return rescaled\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/42", "completion": "    var result = \"\"\n    var number = x\n    while (number > 0) {\n        result = (number % base).toString() + result\n        number /= base\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/27", "completion": "    var result = \"\"\n    for (i in string.indices) {\n        if (string[i] == string[i].toLowerCase()) {\n            result += string[i].toUpperCase()\n        } else {\n            result += string[i].toLowerCase()\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/141", "completion": "    val xNum = x.split(\"/\")[0].toInt()\n    val xDen = x.split(\"/\")[1].toInt()\n    val nNum = n.split(\"/\")[0].toInt()\n    val nDen = n.split(\"/\")[1].toInt()\n    return (xNum * nDen == nNum * xDen)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/98", "completion": "    return s.split(\",| \").toList()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/75", "completion": "    var count = 0\n    for (i in num.toCharArray()) {\n        if (i.isDigit() || i.isLetter()) {\n            if (i.isDigit()) {\n                if (i == '2' || i == '3' || i == '5' || i == '7') {\n                    count++\n                }\n            } else {\n                if (i == 'B' || i == 'D') {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/92", "completion": "    var isLowerCase = true\n    var isUpperCase = true\n    for (key in dict.keys) {\n        if (key is String) {\n            if (key.toLowerCase() != key) {\n                isLowerCase = false\n            }\n            if (key.toUpperCase() != key) {\n                isUpperCase = false\n            }\n        }\n    }\n    return isLowerCase || isUpperCase\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/4", "completion": "    val mean = numbers.average()\n    return numbers.map { it - mean }.map { Math.abs(it) }.average()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/62", "completion": "    var x = x\n    var shift = shift\n    var result = \"\"\n    var count = 0\n    while (x > 0) {\n        result = (x % 10).toString() + result\n        x /= 10\n        count++\n    }\n    if (shift > count) {\n        shift = count\n    }\n    for (i in 0 until shift) {\n        result = result.dropLast(1) + result.first()\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/43", "completion": "    return (a * h) / 2.0\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/128", "completion": "    var result = 0\n    var num = n\n    while (num > 0) {\n        if (num % 2 != 0) {\n            result += num % 10\n        }\n        num /= 10\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/129", "completion": "    var count = 0\n    for (i in string) {\n        if (i == '[') {\n            count++\n        }\n        if (i == ']') {\n            count--\n        }\n        if (count < 0) {\n            return false\n        }\n    }\n    return count == 0\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/46", "completion": "    var text1 = text.toLowerCase()\n    var text2 = text1.reversed()\n    if (text1 == text2) {\n        return true\n    } else {\n        return false\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/93", "completion": "    val list = mutableListOf<Any>()\n    for (i in 2..n) {\n        if (isPrime(i)) {\n            list.add(i)\n        }\n    }\n    return list\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/90", "completion": "    var encodedMessage = \"\"\n    for (i in message.indices) {\n        if (message[i] in 'a'..'z') {\n            encodedMessage += if (message[i] in 'a'..'z') {\n                if (message[i] in 'a'..'z') {\n                    if (message[i] in 'a'..'z') {\n                        if (message[i] in 'a'..'z') {\n                            if (message[i] in 'a'..'z') {\n                                if (message[i] in 'a'..'z') {\n                                    if (message[i] in 'a'..'z') {\n                                        if (message[i] in 'a'..'z') {\n                                            if (message[i] in 'a'..'z') {\n                                                if (message[i] in 'a'..'z') {\n                                                    if (message[i] in 'a'..'z') {\n                                                        if (message[i] in 'a'..'z') {\n                                                            if (message[i] in 'a", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/150", "completion": "    var maxStrength = -1\n    var strongestExtension = \"\"\n    for (extension in extensions) {\n        var strength = 0\n        for (char in extension) {\n            if (char.isUpperCase()) {\n                strength += 1\n            } else {\n                strength -= 1\n            }\n        }\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n    return \"$className.$strongestExtension\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/40", "completion": "    return l.map { it + 1 }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/51", "completion": "    var s0_list = s0.toCharArray()\n    var s1_list = s1.toCharArray()\n    s0_list.sort()\n    s1_list.sort()\n    return s0_list.contentEquals(s1_list)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/99", "completion": "    var result = -1\n    for (i in x..y) {\n        if (i % 2 == 0) {\n            result = i\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/65", "completion": "    var smallestEvenValue = Int.MAX_VALUE\n    var smallestIndex = Int.MAX_VALUE\n    var smallestEvenValueIndex = Int.MAX_VALUE\n    for (i in arr.indices) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue) {\n            smallestEvenValue = arr[i]\n            smallestIndex = i\n        }\n    }\n    if (smallestEvenValue == Int.MAX_VALUE) {\n        return emptyList()\n    }\n    for (i in arr.indices) {\n        if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue && i < smallestIndex) {\n            smallestEvenValue = arr[i]\n            smallestIndex = i\n        }\n    }\n    return listOf(smallestEvenValue, smallestIndex)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/158", "completion": "    var result = \"\"\n    for (i in s.indices) {\n        if (s[i].isLetter()) {\n            if (s[i].isLowerCase()) {\n                result += s[i].toUpperCase()\n            } else {\n                result += s[i].toLowerCase()\n            }\n        } else {\n            result += s[i]\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/106", "completion": "    var i = 0\n    while (i < arr.size - 1) {\n        if (arr[i] > arr[i + 1]) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/58", "completion": "    var count = 0\n    for (i in brackets) {\n        if (i == '(') {\n            count++\n        } else if (i == ')') {\n            count--\n        }\n        if (count < 0) {\n            return false\n        }\n    }\n    return count == 0\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/67", "completion": "    return lst.sortedBy { it }.reversed()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/154", "completion": "    return (a * a + b * b == c * c) || (b * b + c * c == a * a) || (c * c + a * a == b * b)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/113", "completion": "    return arr.sortedWith(compareBy({ it.countOne() }, { it }))\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/124", "completion": "    val start1 = interval1[0]\n    val end1 = interval1[1]\n    val start2 = interval2[0]\n    val end2 = interval2[1]\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\"\n    }\n    val intersectionStart = if (start1 < start2) start2 else start1\n    val intersectionEnd = if (end1 < end2) end1 else end2\n    val intersectionLength = intersectionEnd - intersectionStart\n    if (intersectionLength == 1) {\n        return \"YES\"\n    }\n    for (i in 2..intersectionLength) {\n        if (intersectionLength % i == 0) {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/71", "completion": "    var result = mutableListOf<String>()\n    for (i in lst1.indices) {\n        if (lst1[i].length < lst2[i].length) {\n            result.add(lst1[i])\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/0", "completion": "    var result = false\n    for (i in numbers.indices) {\n        for (j in numbers.indices) {\n            if (i != j && Math.abs(numbers[i] - numbers[j]) < threshold) {\n                result = true\n            }\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/100", "completion": "    if (n > m) return \"-1\"\n    var sum = 0\n    for (i in n..m) {\n        sum += i\n    }\n    return sum.toString(2)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/70", "completion": "    var count = 0\n    var i = 0\n    var j = arr.size - 1\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            arr[i]--\n            count++\n        } else if (arr[i] < arr[j]) {\n            arr[j]--\n            count++\n        } else {\n            i++\n            j--\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/81", "completion": "    var sum = 0\n    var num = n\n    while (num > 0) {\n        sum += num % 2\n        num /= 2\n    }\n    return sum.toString()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/78", "completion": "    val letterGrades = mutableListOf<String>()\n    for (grade in grades) {\n        when {\n            grade >= 4.0 -> letterGrades.add(\"A+\")\n            grade >= 3.7 -> letterGrades.add(\"A\")\n            grade >= 3.3 -> letterGrades.add(\"A-\")\n            grade >= 3.0 -> letterGrades.add(\"B+\")\n            grade >= 2.7 -> letterGrades.add(\"B\")\n            grade >= 2.3 -> letterGrades.add(\"B-\")\n            grade >= 2.0 -> letterGrades.add(\"C+\")\n            grade >= 1.7 -> letterGrades.add(\"C\")\n            grade >= 1.3 -> letterGrades.add(\"C-\")\n            grade >= 1.0 -> letterGrades.add(\"D+\")\n            grade >= 0.7 -> letterGrades.add(\"D\")\n            grade >= 0.0 -> letterGrades.add(\"D-\")\n            else -> letterGrades.add(\"E\")\n        }\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/54", "completion": "    var isIncreasing = true\n    var isDecreasing = true\n    for (i in 1 until l.size) {\n        if (l[i] < l[i - 1]) {\n            isIncreasing = false\n        }\n        if (l[i] > l[i - 1]) {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/94", "completion": "    var result = 0\n    var a1 = a\n    var b1 = b\n    while (a1 != 0) {\n        result += a1 % 10 * b1 % 10\n        a1 /= 10\n        b1 /= 10\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/79", "completion": "    var prime = true\n    var count = 0\n    for (i in 2..string.length) {\n        if (string.length % i == 0) {\n            count++\n        }\n    }\n    if (count > 1) {\n        prime = false\n    }\n    return prime\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/140", "completion": "    val words = sentence.split(\" \")\n    val primeNumbers = mutableListOf<Int>()\n    for (word in words) {\n        if (isPrime(word.length)) {\n            primeNumbers.add(word.length)\n        }\n    }\n    val primeNumbersLength = primeNumbers.size\n    val primeNumbersString = primeNumbers.joinToString(\" \")\n    val primeNumbersStringLength = primeNumbersString.length\n    val primeNumbersStringArray = primeNumbersString.split(\" \")\n    val primeNumbersStringArrayLength = primeNumbersStringArray.size\n    val primeNumbersStringArrayString = primeNumbersStringArray.joinToString(\" \")\n    val primeNumbersStringArrayStringLength = primeNumbersStringArrayString.length\n    val primeNumbersStringArrayStringArray = primeNumbersStringArrayString.split(\" \")\n    val primeNumbersStringArrayStringArrayLength = primeNumbersStringArrayStringArray.size\n    val primeNumbersStringArrayStringArrayString = primeNumbersStringArrayStringArray.joinToString(\" \")\n    val primeNumbersStringArrayString", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/127", "completion": "    var list = mutableListOf<Int>()\n    var a = 1\n    var b = 3\n    var c = 2\n    var d = 8\n    list.add(a)\n    list.add(b)\n    list.add(c)\n    list.add(d)\n    for (i in 4..n) {\n        var e = a + b + c\n        list.add(e)\n        a = b\n        b = c\n        c = d\n        d = e\n    }\n    return list\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/133", "completion": "    var max = Int.MIN_VALUE\n    var min = Int.MAX_VALUE\n    var maxIndex = -1\n    var minIndex = -1\n    for (i in lst.indices) {\n        if (lst[i] > max) {\n            max = lst[i]\n            maxIndex = i\n        }\n        if (lst[i] < min) {\n            min = lst[i]\n            minIndex = i\n        }\n    }\n    return if (maxIndex == -1 || minIndex == -1) {\n        listOf(null, null)\n    } else {\n        listOf(max, min)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/18", "completion": "    var count = 0\n    var i = 0\n    while (i < string.length) {\n        if (string.substring(i, i + substring.length) == substring) {\n            count++\n        }\n        i++\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/159", "completion": "    return text.md5()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/118", "completion": "    var sum = 0\n    for (i in lst.indices) {\n        if (lst[i] % 2 == 0 && i % 2 == 1) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/33", "completion": "    val result = mutableListOf<Int>()\n    for (i in l) {\n        if (!result.contains(i)) {\n            result.add(i)\n        }\n    }\n    return result.sorted()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/153", "completion": "    var result = \"\"\n    var number = number\n    while (number > 0) {\n        if (number >= 1000) {\n            result += \"m\"\n            number -= 1000\n        } else if (number >= 900) {\n            result += \"cm\"\n            number -= 900\n        } else if (number >= 500) {\n            result += \"d\"\n            number -= 500\n        } else if (number >= 400) {\n            result += \"cd\"\n            number -= 400\n        } else if (number >= 100) {\n            result += \"c\"\n            number -= 100\n        } else if (number >= 90) {\n            result += \"xc\"\n            number -= 90\n        } else if (number >= 50) {\n            result += \"l\"\n            number -= 50\n        } else if (number >= 40) {\n            result += \"xl\"\n            number -= 40\n        } else if (number >= 10) {\n            result += \"", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/123", "completion": "    var sorted = true\n    for (i in 0 until lst.size - 1) {\n        if (lst[i] > lst[i + 1]) {\n            sorted = false\n            break\n        }\n    }\n    return sorted\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/20", "completion": "    var minDiff = Double.MAX_VALUE\n    var min1 = 0.0\n    var min2 = 0.0\n    for (i in 0 until numbers.size - 1) {\n        for (j in i + 1 until numbers.size) {\n            val diff = numbers[j] - numbers[i]\n            if (diff < minDiff) {\n                minDiff = diff\n                min1 = numbers[i]\n                min2 = numbers[j]\n            }\n        }\n    }\n    return listOf(min1, min2)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/53", "completion": "    var count = 0\n    for (i in brackets) {\n        if (i == '<') {\n            count++\n        } else if (i == '>') {\n            count--\n        }\n    }\n    return count == 0\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/130", "completion": "    var sum = 0\n    for (i in lst) {\n        sum += Math.ceil(i).toInt() * Math.ceil(i).toInt()\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/39", "completion": "    var count = 0\n    for (i in 0 until n) {\n        if (i % 2 == 0) {\n            if (i + 1 < n && i + 2 < n) {\n                if (i + 1 == n - 1) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/13", "completion": "    var a = a\n    var b = b\n    if (a == 0) {\n        return b\n    }\n    if (b == 0) {\n        return a\n    }\n    while (a != b) {\n        if (a > b) {\n            a -= b\n        } else {\n            b -= a\n        }\n    }\n    return a\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/104", "completion": "    var even = 0\n    var odd = 0\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            even++\n        } else {\n            odd++\n        }\n    }\n    return listOf(even, odd)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/56", "completion": "    var i = 2\n    var max = 0\n    while (i <= n) {\n        if (n % i == 0) {\n            if (isPrime(i)) {\n                max = i\n            }\n        }\n        i++\n    }\n    return max\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/1", "completion": "    val result = mutableListOf<String>()\n    var current = \"\"\n    var open = 0\n    for (i in parenString.indices) {\n        if (parenString[i] == '(') {\n            open++\n        } else if (parenString[i] == ')') {\n            open--\n        }\n        if (open == 0) {\n            result.add(current)\n            current = \"\"\n        } else {\n            current += parenString[i]\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/66", "completion": "    var max = 0\n    var maxFreq = 0\n    for (i in lst) {\n        var freq = 0\n        for (j in lst) {\n            if (i == j) {\n                freq++\n            }\n        }\n        if (freq > maxFreq) {\n            maxFreq = freq\n            max = i\n        }\n    }\n    if (maxFreq == 0) {\n        return -1\n    }\n    return max\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/151", "completion": "    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = ", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/122", "completion": "    val words = txt.split(\" \")\n    val words2 = txt.split(\",\")\n    if (words.size == 1) {\n        return words[0].length\n    }\n    return words2.size\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/5", "completion": "    val result = mutableListOf<Any>()\n    for (i in numbers.indices) {\n        if (i != 0) {\n            result.add(delimeter)\n        }\n        result.add(numbers[i])\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/142", "completion": "    val sorted = nums.sortedWith(compareBy({it.sumOfDigits()}, {it}))\n    return sorted.mapIndexed { index, it -> it }.toList()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/48", "completion": "    var result = \"\"\n    for (i in text) {\n        if (i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u') {\n            result += i\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/155", "completion": "    var max = 0\n    var maxWord = \"\"\n    for (word in words) {\n        if (word.length > max) {\n            max = word.length\n            maxWord = word\n        }\n    }\n    return maxWord\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/125", "completion": "    var sum = 0\n    var product = 1\n    for (i in arr) {\n        sum += i\n        product *= i\n    }\n    return if (arr.isEmpty()) {\n        null\n    } else {\n        sum * product\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/149", "completion": "    val result = mutableListOf<Int>()\n    for (i in game.indices) {\n        result.add(game[i] - guess[i])\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/139", "completion": "    var sum = 0\n    for (i in lst.indices) {\n        if (i % 3 == 0 && i % 4 != 0) {\n            sum += lst[i] * lst[i]\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/131", "completion": "    return txt.last() in 'a'..'z' && txt.last() !in 'a'..'z' && txt.last() !in 'A'..'Z'\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/156", "completion": "    var eaten = number\n    var remainingCarrots = remaining\n    while (eaten < need) {\n        eaten += remainingCarrots\n        remainingCarrots -= 1\n    }\n    return listOf(eaten, remainingCarrots)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/41", "completion": "    val set = mutableSetOf<Int>()\n    for (i in l) {\n        if (set.contains(-i)) {\n            return true\n        }\n        set.add(i)\n    }\n    return false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/110", "completion": "    val result = mutableListOf<String>()\n    for (i in lst.indices) {\n        var count = 0\n        for (j in lst[i].indices) {\n            if (lst[i][j].toInt() % 2 != 0) {\n                count++\n            }\n        }\n        result.add(\"the number of odd elements $count n the str${i+1}ng ${i+1} of the ${i+1}nput.\")\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/28", "completion": "    var result = \"\"\n    for (i in strings) {\n        result += i\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/114", "completion": "    val words = s.split(\" \")\n    val result = mutableListOf<String>()\n    for (word in words) {\n        if (word.count { it.isLetter() } == n) {\n            result.add(word)\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/45", "completion": "    val sortedList = l.sorted()\n    val middle = sortedList.size / 2\n    if (sortedList.size % 2 == 0) {\n        return (sortedList[middle - 1] + sortedList[middle]) / 2.0\n    } else {\n        return sortedList[middle].toDouble()\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/116", "completion": "    var count = 0\n    for (i in lst[0].indices) {\n        if (lst[0][i] == '(') {\n            count++\n        } else if (lst[0][i] == ')') {\n            count--\n        }\n    }\n    if (count == 0) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/147", "completion": "    if (n % 2 == 0) {\n        return x\n    }\n    return y\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/117", "completion": "    return arr.sorted().takeLast(k).toList()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/109", "completion": "    var result = \"\"\n    var isPalindrome = false\n    for (i in s.indices) {\n        if (s[i] != c[0]) {\n            result += s[i]\n        }\n    }\n    if (result == result.reversed()) {\n        isPalindrome = true\n    }\n    return Pair(result, isPalindrome)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/112", "completion": "    var max = 0\n    for (i in grid.indices) {\n        for (j in grid[i].indices) {\n            if (grid[i][j] == 1) {\n                var count = 0\n                var k = i\n                while (k >= 0 && grid[k][j] == 1) {\n                    count++\n                    k--\n                }\n                k = i\n                while (k < grid.size && grid[k][j] == 1) {\n                    count++\n                    k++\n                }\n                k = j\n                while (k >= 0 && grid[i][k] == 1) {\n                    count++\n                    k--\n                }\n                k = j\n                while (k < grid[i].size && grid[i][k] == 1) {\n                    count++\n                    k++\n                }\n                if (count > max) {\n                    max = count\n                }\n            }\n        }\n    }\n    return max\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/55", "completion": "    val l1Set = l1.toSet()\n    val l2Set = l2.toSet()\n    val commonSet = l1Set.intersect(l2Set)\n    return commonSet.toList()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/36", "completion": "    val even = l.filterIndexed { index, _ -> index % 2 == 0 }\n    val odd = l.filterIndexed { index, _ -> index % 2 != 0 }\n    return even.sorted() + odd\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/68", "completion": "    if (a + b > c && a + c > b && b + c > a) {\n        return (a + b + c) / 2.0\n    }\n    return -1\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/60", "completion": "    var a = 0\n    var b = 0\n    var c = 1\n    for (i in 0 until n) {\n        a = b\n        b = c\n        c = a + b + c\n    }\n    return c\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/101", "completion": "    val result = mutableListOf<Int>()\n    for (i in x) {\n        if (i.toString().length == 1) {\n            result.add(i)\n        }\n    }\n    return result.sorted()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/19", "completion": "    val numbersList = numbers.split(\" \")\n    val sortedList = numbersList.sorted()\n    return sortedList.joinToString(\" \")\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/97", "completion": "    var i = 1\n    val list = mutableListOf<Int>()\n    while (i <= n) {\n        if (i % 2 == 0) {\n            list.add(i)\n        } else {\n            list.add(i + 1)\n        }\n        i++\n    }\n    return list\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/126", "completion": "    val n = grid.size\n    val dp = Array(n) { Array(n) { IntArray(k + 1) } }\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            dp[i][j][0] = grid[i][j]\n        }\n    }\n    for (i in 1 until k + 1) {\n        for (j in 0 until n) {\n            for (l in 0 until n) {\n                dp[l][j][i] = dp[l][j][i - 1] + grid[l][j]\n            }\n        }\n        for (j in 0 until n) {\n            for (l in 0 until n) {\n                dp[j][l][i] = dp[j][l][i - 1] + grid[j][l]\n            }\n        }\n    }\n    val res = mutableListOf<Int>()\n    for (i in 0 until n) {\n        for (j in 0 until n) {", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/134", "completion": "    if (a is Int && b is Int) {\n        return if (a > b) a else b\n    }\n    if (a is Double && b is Double) {\n        return if (a > b) a else b\n    }\n    if (a is String && b is String) {\n        return if (a > b) a else b\n    }\n    return null\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/136", "completion": "    var result = 1L\n    for (i in 1..n) {\n        result *= i\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/7", "completion": "    return strings.filter { it.contains(substring) }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/47", "completion": "    return 0\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/8", "completion": "    var sum = 0\n    var product = 1\n    for (i in numbers) {\n        sum += i\n        product *= i\n    }\n    return listOf(sum, product)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/25", "completion": "    var i = 2\n    var list = mutableListOf<Int>()\n    while (n > 1) {\n        if (n % i == 0) {\n            list.add(i)\n            n /= i\n        } else {\n            i++\n        }\n    }\n    return list.distinct().sorted()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/69", "completion": "    var sum = 0\n    for (i in q) {\n        sum += i\n    }\n    return sum <= w && q.isBalanced()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/52", "completion": "    var a = 0\n    var b = 1\n    var c = 0\n    for (i in 1..n) {\n        c = a + b\n        a = b\n        b = c\n    }\n    return a\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/6", "completion": "    val stack = mutableListOf<Int>()\n    val result = mutableListOf<Int>()\n    var level = 0\n    for (i in parenString.indices) {\n        if (parenString[i] == '(') {\n            level++\n            stack.add(level)\n        } else if (parenString[i] == ')') {\n            level--\n            result.add(stack.removeLast())\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/73", "completion": "    var i = 1\n    while (i <= n) {\n        if (i * i == x) {\n            return true\n        }\n        i++\n    }\n    return false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/83", "completion": "    val words = s.split(\" \")\n    val sortedWords = words.sortedBy { it.toCharArray().sorted().joinToString(\"\") }\n    return sortedWords.joinToString(\" \")\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/22", "completion": "    return values.filterIsInstance<Int>()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/26", "completion": "    val result = mutableListOf<Int>()\n    val map = mutableMapOf<Int, Int>()\n    for (number in numbers) {\n        if (map.containsKey(number)) {\n            map[number] = map[number]!! + 1\n        } else {\n            map[number] = 1\n        }\n    }\n    for (number in numbers) {\n        if (map[number]!! > 1) {\n            result.add(number)\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/105", "completion": "    var count = 0\n    for (i in arr) {\n        if (i > 0) {\n            var sum = 0\n            while (i > 0) {\n                sum += i % 10\n                i /= 10\n            }\n            if (sum > 0) {\n                count++\n            }\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/35", "completion": "    var count = 0\n    for (i in 0..n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/30", "completion": "    return l.filter { it > 0 }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/80", "completion": "    var count = 0\n    for (i in 1..n) {\n        if (i.toString().startsWith(\"1\") || i.toString().endsWith(\"1\")) {\n            count++\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/11", "completion": "    var result = \"\"\n    for (i in 0 until a.length) {\n        if (a[i] == b[i]) {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/2", "completion": "    return number - (number.toInt())\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/138", "completion": "    var result = \"No\"\n    if (fileName.length <= 3) {\n        result = \"Yes\"\n    }\n    if (fileName.contains(\".\")) {\n        var dotIndex = fileName.indexOf(\".\")\n        var beforeDot = fileName.substring(0, dotIndex)\n        var afterDot = fileName.substring(dotIndex + 1)\n        if (beforeDot.length > 0 && beforeDot.first() in 'a'..'z' || beforeDot.length > 0 && beforeDot.first() in 'A'..'Z') {\n            if (afterDot in listOf(\"txt\", \"exe\", \"dll\")) {\n                result = \"Yes\"\n            }\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/37", "completion": "    var a = 0\n    var b = 1\n    var c = 0\n    var i = 0\n    while (i < n) {\n        c = a + b\n        a = b\n        b = c\n        i++\n    }\n    return c\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/24", "completion": "    var i = 1\n    while (i < n) {\n        if (n % i == 0) {\n            return i\n        }\n        i++\n    }\n    return n\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/145", "completion": "    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n    val result = mutableListOf<String>()\n    if (index1 == -1 || index2 == -1) {\n        return result\n    }\n    if (index1 > index2) {\n        for (i in index2 until index1) {\n            result.add(planets[i])\n        }\n    } else {\n        for (i in index1 until index2) {\n            result.add(planets[i])\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/120", "completion": "    var list = mutableListOf<Int>()\n    var i = 1\n    while (i <= n) {\n        if (i % 2 != 0) {\n            list.add(i)\n        }\n        i = i * 3 + 1\n    }\n    return list.sorted()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/76", "completion": "    var binary = \"\"\n    var decimal = decimal\n    while (decimal > 0) {\n        binary = (decimal % 2).toString() + binary\n        decimal /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/15", "completion": "    var result = \"\"\n    for (i in 0..n) {\n        result += i.toString() + \" \"\n    }\n    return result.trim()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/107", "completion": "    var even1 = mutableListOf<Int>()\n    var even2 = mutableListOf<Int>()\n    var odd1 = mutableListOf<Int>()\n    var odd2 = mutableListOf<Int>()\n    for (i in lst1) {\n        if (i % 2 == 0) {\n            even1.add(i)\n        } else {\n            odd1.add(i)\n        }\n    }\n    for (i in lst2) {\n        if (i % 2 == 0) {\n            even2.add(i)\n        } else {\n            odd2.add(i)\n        }\n    }\n    if (even1.size == even2.size && odd1.size == odd2.size) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/16", "completion": "    var distinctCharacters = 0\n    for (i in string.indices) {\n        if (string[i].isLetter()) {\n            distinctCharacters++\n        }\n    }\n    return distinctCharacters\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/61", "completion": "    var count = 0\n    for (i in s) {\n        if (i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u') {\n            count++\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/115", "completion": "    var vowel = \"\"\n    var index = word.length - 1\n    while (index >= 0) {\n        if (word[index] in 'aeiouAEIOU') {\n            vowel = word[index]\n            break\n        }\n        index--\n    }\n    if (vowel.isEmpty()) {\n        return \"\"\n    }\n    var index2 = index + 1\n    while (index2 < word.length) {\n        if (word[index2] in 'aeiouAEIOU') {\n            vowel = word[index2]\n            break\n        }\n        index2++\n    }\n    return vowel\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/111", "completion": "    var sum = 0L\n    var min = Long.MAX_VALUE\n    for (i in nums.indices) {\n        sum += nums[i]\n        min = min.coerceAtLeast(sum)\n        if (sum < 0) {\n            sum = 0\n        }\n    }\n    return min\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/82", "completion": "    var sum = 0\n    for (i in lst.indices) {\n        if (i % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/49", "completion": "    for (i in l) {\n        if (i > t) {\n            return false\n        }\n    }\n    return true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/29", "completion": "    return strings.filter { it.startsWith(prefix) }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/144", "completion": "    var count = 0\n    for (i in 1..n) {\n        for (j in i..n) {\n            for (k in j..n) {\n                if (i * i + j * j + k * k % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/86", "completion": "    var result = \"\"\n    for (i in s.indices) {\n        result += (s[i].toInt() + 2).toString()\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/23", "completion": "    var count = 0\n    for (i in string) {\n        count++\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/135", "completion": "    var sum = 0\n    for (i in 1..n) {\n        if (i % 2 == 0 && i % 3 == 0) {\n            sum += i\n        }\n    }\n    return sum == n\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/72", "completion": "    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = ", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/59", "completion": "    val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/10", "completion": "    var result = \"\"\n    var i = 0\n    var j = string.length - 1\n    while (i < j) {\n        if (string[i] == string[j]) {\n            i++\n            j--\n        } else {\n            result = string.substring(0, j) + string.substring(i + 1, string.length)\n            break\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/103", "completion": "    val result = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            result.add(i)\n        } else {\n            result.add(i)\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/108", "completion": "    val map = mutableMapOf<String, Int>()\n    text.split(\" \").forEach {\n        if (map.containsKey(it)) {\n            map[it] = map[it]!! + 1\n        } else {\n            map[it] = 1\n        }\n    }\n    return map\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/146", "completion": "    return lst.filter { it.length % 2 == 0 }.sortedBy { it.length }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/38", "completion": "    // TODO: Implement this function\n    return false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/143", "completion": "    var count = 0\n    for (i in nums) {\n        if (i > 10 && i % 10 % 2 == 1 && i % 100 % 2 == 1) {\n            count++\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/132", "completion": "    var max = arr.max()\n    var index = -1\n    for (i in arr.indices) {\n        if (arr[i] < max) {\n            index = i\n        }\n    }\n    return index\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/12", "completion": "    var max = \"\"\n    for (s in strings) {\n        if (s.length > max.length) {\n            max = s\n        }\n    }\n    return max\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/31", "completion": "    if (n <= 1) return false\n    for (i in 2..n / 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/102", "completion": "    val sorted = arr.sorted()\n    val reversed = sorted.reversed()\n    val result = mutableListOf<String>()\n    for (i in reversed) {\n        when (i) {\n            1 -> result.add(\"One\")\n            2 -> result.add(\"Two\")\n            3 -> result.add(\"Three\")\n            4 -> result.add(\"Four\")\n            5 -> result.add(\"Five\")\n            6 -> result.add(\"Six\")\n            7 -> result.add(\"Seven\")\n            8 -> result.add(\"Eight\")\n            9 -> result.add(\"Nine\")\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/64", "completion": "    val fruits = s.split(\" \")\n    val apples = fruits[0].toInt()\n    val oranges = fruits[1].toInt()\n    return totalFruits - apples - oranges\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/157", "completion": "    var result = operand[0]\n    for (i in 0 until operand.size - 1) {\n        when (operator[i]) {\n            \"+\" -> result += operand[i + 1]\n            \"-\" -> result -= operand[i + 1]\n            \"*\" -> result *= operand[i + 1]\n            \"/\" -> result /= operand[i + 1]\n            \"**\" -> result = result.toDouble().pow(operand[i + 1]).toInt()\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/96", "completion": "    val number = value.toDouble()\n    val rounded = Math.round(number)\n    return rounded.toInt()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/44", "completion": "    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/63", "completion": "    var sum = 0\n    for (i in s) {\n        if (i.isUpperCase()) {\n            sum += i.toInt()\n        }\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/14", "completion": "    val result = mutableListOf<Any>()\n    for (i in 0..string.length) {\n        result.add(string.substring(0, i))\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/95", "completion": "    var count = 0\n    for (i in s.indices) {\n        if (i % 2 == 0 && s[i].isUpperCase()) {\n            count++\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/9", "completion": "    val result = mutableListOf<Int>()\n    var max = numbers[0]\n    for (i in numbers.indices) {\n        if (numbers[i] > max) {\n            max = numbers[i]\n        }\n        result.add(max)\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/152", "completion": "    var even = 0\n    var odd = 0\n    var num2 = num\n    while (num2 != 0) {\n        if (num2 % 2 == 0) {\n            even++\n        } else {\n            odd++\n        }\n        num2 /= 10\n    }\n    return listOf(even, odd)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/50", "completion": "    return x + y\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/85", "completion": "    val sum = array.sum()\n    return if (sum % 2 == 0) {\n        array.sortedDescending()\n    } else {\n        array.sorted()\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/91", "completion": "    var max = 0\n    var sum = 0\n    for (i in lst) {\n        if (i > max) {\n            max = i\n        }\n    }\n    for (i in lst) {\n        if (i == max) {\n            sum += i\n        }\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/148", "completion": "    var sum = 0\n    for (i in lst) {\n        if (i % 2 != 0 && i > 0) {\n            sum += i * i\n        }\n    }\n    return sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/121", "completion": "    val dateArray = date.split(\"-\")\n    val month = dateArray[0].toInt()\n    val day = dateArray[1].toInt()\n    val year = dateArray[2].toInt()\n    if (date.length != 10) {\n        return false\n    }\n    if (month < 1 || month > 12) {\n        return false\n    }\n    if (day < 1 || day > 31) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            return false\n        }\n    }\n    if (day < 1 || day > 30) {\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return false\n        }\n    }\n    if (day < 1 || day > 29) {\n        if (month == 2) {\n            return false\n        }\n    }\n    return true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/137", "completion": "    var result = \"\"\n    for (i in text.indices) {\n        if (text[i] == ' ') {\n            if (i < text.length - 1 && text[i + 1] == ' ') {\n                result += \"-\"\n            } else {\n                result += \"_\"\n            }\n        } else {\n            result += text[i]\n        }\n    }\n    return result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/77", "completion": "    var result = s.toCharArray()\n    var i = 0\n    while (i < result.size) {\n        if (result[i] == result[i + 1] && result[i] == result[i + 2]) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n", "language": "kotlin"}
